# Databricks notebook source
# MAGIC %md
# MAGIC
# MAGIC <div style="text-align: center; line-height: 0; padding-top: 9px;">
# MAGIC   <img src="https://databricks.com/wp-content/uploads/2018/03/db-academy-rgb-1200px.png" alt="Databricks Learning">
# MAGIC </div>
# MAGIC

# COMMAND ----------

# MAGIC %md
# MAGIC # Modelagem de Entidades e Relacionamentos e Manipula√ß√£o de Restri√ß√µes
# MAGIC Nesta demonstra√ß√£o, exploraremos como modelar dados usando o ERM (Entity Relationship Modeling) no Databricks. Voc√™ aprender√° a criar tabelas com restri√ß√µes de primary key (PK) e foreign key (FK), carregar dados de datasets TPC-H, identificar viola√ß√µes de restri√ß√£o e visualizar relacionamentos de tabela usando Entity Relationship Diagrams (ERDs). Al√©m disso, voc√™ praticar√° o gerenciamento da consist√™ncia dos dados e a execu√ß√£o de opera√ß√µes de limpeza sem interromper o ambiente.

# COMMAND ----------

# MAGIC %md
# MAGIC ## Objetivos de Aprendizagem
# MAGIC Ao final desta demonstra√ß√£o, voc√™ ser√° capaz de:
# MAGIC - Aplicar restri√ß√µes de primary e foreign key para modelar relacionamentos de tabela relacional no Databricks.
# MAGIC - Demonstrar como carregar dados em tabelas usando comandos SQL do esquema bronze.
# MAGIC - Avaliar o impacto de restri√ß√µes n√£o impostas e simular viola√ß√µes de integridade de dados.
# MAGIC - Analisar e solucionar problemas de viola√ß√µes de restri√ß√µes usando opera√ß√µes SQL.
# MAGIC - Visualize Diagramas de Relacionamento de Entidade para interpretar relacionamentos de tabela de forma eficaz.

# COMMAND ----------

# MAGIC %md
# MAGIC ## üö®OBRIGAT√ìRIO - SELECT CLASSIC COMPUTE
# MAGIC Antes de executar c√©lulas neste notebook, selecione seu cluster de compute cl√°ssico no laborat√≥rio. Lembre-se de que **Serverless** est√° habilitado por default.
# MAGIC
# MAGIC Siga estas etapas para selecionar o cluster de compute cl√°ssico:
# MAGIC * Navegue at√© o canto superior direito deste notebook e clique no menu dropdown para selecionar seu cluster. Por default, o notebook usar√° **Serverless**. <br>
# MAGIC
# MAGIC ##### **üìå**Se o cluster estiver dispon√≠vel, selecione-o e continue para a pr√≥xima c√©lula. Se o cluster n√£o for mostrado:
# MAGIC   - Na lista dropdown, selecione **More**.
# MAGIC   - No pop-up **Attach to an existing compute resource**, selecione a primeira lista dropdown. Voc√™ ver√° um nome de cluster exclusivo nessa lista dropdown. Selecione esse cluster.
# MAGIC
# MAGIC **NOTA:** Se o cluster tiver sido encerrado, talvez seja necess√°rio reinici√°-lo para selecion√°-lo. Para fazer isso:
# MAGIC 1. Clique com o bot√£o direito do rato em **Compute** no painel de navega√ß√£o esquerdo e selecione *Open in new tab*.
# MAGIC 2. Localize o √≠cone de tri√¢ngulo √† direita do nome do cluster de compute e clique nele.
# MAGIC 3. Aguarde alguns minutos para que o cluster seja iniciado.
# MAGIC 4. Quando o cluster estiver em execu√ß√£o, conclua as etapas acima para selecion√°-lo.

# COMMAND ----------

# MAGIC %md
# MAGIC ## Requisitos
# MAGIC
# MAGIC Analise os seguintes requisitos antes de iniciar a demonstra√ß√£o:
# MAGIC
# MAGIC * Para executar este notebook, voc√™ precisa usar um dos seguintes Databricks runtime(s): **15.4.x-scala2.12**

# COMMAND ----------

# MAGIC %md
# MAGIC ## Configura√ß√£o

# COMMAND ----------

# MAGIC %md
# MAGIC ### Passo 1: Executar a configura√ß√£o de laborat√≥rio (pr√©-requisito)
# MAGIC
# MAGIC Antes de prosseguir com o conte√∫do desta e de outras atividades de laborat√≥rio, certifique-se de ter executado o script de configura√ß√£o do laborat√≥rio.
# MAGIC Como resultado da execu√ß√£o do script, voc√™ criar√°:
# MAGIC 1. Um cat√°logo dedicado com o nome da sua conta de usu√°rio de laborat√≥rio.  
# MAGIC 2. Esquemas nomeados `bronze`, `silver` e `gold` dentro do cat√°logo.  
# MAGIC 3. Tabelas TPC-H copiadas de Samples para o esquema `bronze`.

# COMMAND ----------

# DBTITLE 1,%run ./Includes/setup/lab_setup
# MAGIC %run ./Includes/setup/lab_setup

# COMMAND ----------

# MAGIC %md
# MAGIC ### Passo 2: Escolha o cat√°logo e o esquema de trabalho
# MAGIC
# MAGIC Ao longo deste laborat√≥rio, voc√™ pode criar novas tabelas em `silver`  (ou outro esquema de sua escolha). 
# MAGIC Para demonstra√ß√£o, usaremos o esquema `silver` no cat√°logo espec√≠fico do usu√°rio.  
# MAGIC

# COMMAND ----------

# DBTITLE 1,Cat√°logo de Trabalho e Esquema
import re

# Obter o usu√°rio atual e extrair o nome do cat√°logo dividindo o e-mail em '@' e tomando a primeira parte
user_id = spark.sql("SELECT current_user()").collect()[0][0].split("@")[0]

# Substitua todos os caracteres especiais no `user_id` por um sublinhado '_' para criar o nome do cat√°logo
catalog_name = re.sub(r'[^a-zA-Z0-9]', '_', user_id) # C√≥digo novo

# Defina o nome do esquema a ser usado
schema_name = "silver"

# COMMAND ----------

# Criar um widget para capturar o nome do cat√°logo e todos os nomes de esquema
dbutils.widgets.text("catalog_name", catalog_name)
dbutils.widgets.text("schema_name", schema_name)

# COMMAND ----------

# MAGIC %sql
# MAGIC -- Defina o cat√°logo atual para o nome do cat√°logo extra√≠do
# MAGIC USE CATALOG IDENTIFIER(:catalog_name)

# COMMAND ----------

# MAGIC %sql
# MAGIC -- Defina o esquema atual para o nome do esquema definido
# MAGIC USE SCHEMA IDENTIFIER(:schema_name)

# COMMAND ----------

# MAGIC %sql
# MAGIC -- Exibir os nomes default do cat√°logo e do esquema
# MAGIC SELECT current_catalog() AS Catalog_Name, current_schema() AS Schema_Name;

# COMMAND ----------

# MAGIC %md
# MAGIC ### Passo 3: Criar tabelas com restri√ß√µes
# MAGIC
# MAGIC Criaremos duas tabelas para demonstrar as restri√ß√µes **Primary Key (PK)** e **Foreign Key (FK)**:
# MAGIC
# MAGIC 1. `lab_customer` com uma primary key em `c_custkey`.  
# MAGIC 2. `lab_orders` com:  
# MAGIC    - Uma primary key em `o_orderkey`.  
# MAGIC    - Uma foreign key em `o_custkey` referenciando `lab_customer(c_custkey)`.
# MAGIC
# MAGIC
# MAGIC Embora o Databricks **n√£o** imponha restri√ß√µes de primary key (PK) e foreign key (FK) por default, ele **os usa** para *explicar* as rela√ß√µes entre tabelas.
# MAGIC
# MAGIC Essas restri√ß√µes s√£o apenas informativas e servem para codificar rela√ß√µes entre campos em tabelas, sem impor a integridade dos dados.
# MAGIC
# MAGIC Essa abordagem permite que o Databricks forne√ßa recursos √∫teis, como: Entity Relationship Diagrams (ERDs) no Catalog Explorer, que exibem visualmente as rela√ß√µes de primary key e foreign key entre tabelas como um gr√°fico.
# MAGIC
# MAGIC As restri√ß√µes `NOT NULL` e `CHECK` s√£o aplicadas na tabela.

# COMMAND ----------

# DBTITLE 1,CREATE silver.lab_customer
# MAGIC %sql
# MAGIC -- Crie a tabela lab_customer com uma restri√ß√£o PRIMARY KEY no c_custkey
# MAGIC CREATE TABLE IF NOT EXISTS lab_customer 
# MAGIC (
# MAGIC   c_custkey INT,
# MAGIC   c_name STRING,
# MAGIC   c_address STRING,
# MAGIC   c_nationkey INT,
# MAGIC   c_phone STRING,
# MAGIC   c_acctbal DECIMAL(12,2),
# MAGIC   c_mktsegment STRING,
# MAGIC   c_comment STRING,
# MAGIC   CONSTRAINT pk_custkey PRIMARY KEY (c_custkey)
# MAGIC );

# COMMAND ----------

# MAGIC %sql
# MAGIC -- Verifique o cat√°logo atual
# MAGIC SELECT current_catalog();

# COMMAND ----------

# MAGIC %sql
# MAGIC -- Verifique o esquema atual
# MAGIC SELECT current_schema();

# COMMAND ----------

# MAGIC %md
# MAGIC **Nota:** Substitua os valores `<default_catalog_name>` e `<default_schema_name>` no c√≥digo abaixo pelos nomes de cat√°logo e esquema default reais da sa√≠da da query nas c√©lulas anteriores:
# MAGIC
# MAGIC **Target Code Line:**```dbsql
# MAGIC CONSTRAINT fk_custkey FOREIGN KEY (o_custkey) REFERENCES <default_catalog_name>.<default_schema_name>.lab_customer
# MAGIC ```

# COMMAND ----------

# DBTITLE 1,CRIAR silver.lab_orders
# MAGIC %sql
# MAGIC -- Crie a tabela lab_orders com PRIMARY KEY no o_orderkey
# MAGIC -- e uma FOREIGN KEY referenciando lab_customer(c_custkey)
# MAGIC -- Nota: Forne√ßa REFERENCES com namespace de tr√™s n√≠veis
# MAGIC
# MAGIC CREATE TABLE IF NOT EXISTS lab_orders
# MAGIC (
# MAGIC   o_orderkey INT,
# MAGIC   o_custkey INT,
# MAGIC   o_orderstatus STRING,
# MAGIC   o_totalprice DECIMAL(12,2),
# MAGIC   o_orderdate DATE,
# MAGIC   o_orderpriority STRING,
# MAGIC   o_clerk STRING,
# MAGIC   o_shippriority INT,
# MAGIC   o_comment STRING,
# MAGIC   CONSTRAINT pk_orderkey PRIMARY KEY (o_orderkey),
# MAGIC   CONSTRAINT fk_custkey FOREIGN KEY (o_custkey) REFERENCES <default_catalog_name>.<default_schema_name>.lab_customer(c_custkey)
# MAGIC );

# COMMAND ----------

# MAGIC %md
# MAGIC ###Step 4: Inserir dados das tabelas bronze TPC-H
# MAGIC
# MAGIC Preencheremos as tabelas rec√©m-criadas `lab_customer` e `lab_orders` com os dados TPC-H localizados no esquema `bronze`.

# COMMAND ----------

# DBTITLE 1,INSERT INTO silver.lab_customer FROM bronze.customer
# MAGIC %sql
# MAGIC -- Inserir dados no lab_customer de bronze.cliente
# MAGIC INSERT INTO lab_customer
# MAGIC SELECT
# MAGIC   c_custkey,
# MAGIC   c_name,
# MAGIC   c_address,
# MAGIC   c_nationkey,
# MAGIC   c_phone,
# MAGIC   c_acctbal,
# MAGIC   c_mktsegment,
# MAGIC   c_comment
# MAGIC FROM bronze.customer;
# MAGIC

# COMMAND ----------

# DBTITLE 1,INSERT INTO silver.lab_orders FROM bronze.orders
# MAGIC %sql
# MAGIC -- Inserir dados em lab_orders de bronze.orders
# MAGIC INSERT INTO lab_orders
# MAGIC SELECT
# MAGIC   o_orderkey,
# MAGIC   o_custkey,
# MAGIC   o_orderstatus,
# MAGIC   o_totalprice,
# MAGIC   o_orderdate,
# MAGIC   o_orderpriority,
# MAGIC   o_clerk,
# MAGIC   o_shippriority,
# MAGIC   o_comment
# MAGIC FROM bronze.orders;

# COMMAND ----------

# MAGIC %md
# MAGIC ###Step 5: Demonstrar viola√ß√µes `CONSTRAINT`
# MAGIC
# MAGIC Como mencionado anteriormente, o Databricks n√£o imp√µe as restri√ß√µes que definimos para relacionamentos prim√°rios e externos. Vamos ver as implica√ß√µes disso na pr√°tica.
# MAGIC
# MAGIC 1. **Foreign Key Violation**: Insira uma linha em `lab_orders` referenciando um `o_custkey` inexistente.  
# MAGIC 2. **Primary Key Violation**: Insira uma linha duplicada em `lab_customer`.

# COMMAND ----------

# MAGIC %md
# MAGIC #### Viola√ß√£o de Foreign Key
# MAGIC
# MAGIC Vamos inserir um pedido fazendo refer√™ncia a um `o_custkey` inexistente. Na implementa√ß√£o atual, o Databricks n√£o imp√µe essa rela√ß√£o por default, portanto, essa inser√ß√£o pode ser bem-sucedida sem erros.

# COMMAND ----------

# DBTITLE 1,INSERT INTO silver.lab_orders
# MAGIC %sql
# MAGIC INSERT INTO lab_orders 
# MAGIC VALUES
# MAGIC (
# MAGIC   9999999,         -- o_orderkey
# MAGIC   9999999,         -- o_custkey (inexistente em lab_customer)
# MAGIC   'F',
# MAGIC   1000.00,
# MAGIC   current_date(),
# MAGIC   '3-LOW',
# MAGIC   'Clerk#000000001',
# MAGIC   0,
# MAGIC   'Testing invalid customer key'
# MAGIC );

# COMMAND ----------

# MAGIC %md
# MAGIC #### Viola√ß√£o de Primary Key
# MAGIC
# MAGIC Em seguida, inseriremos uma linha em `lab_customer` usando um valor para `c_custkey` que j√° existe na tabela. Novamente, isso n√£o deve gerar um erro, devido ao comportamento default de nossas restri√ß√µes n√£o impostas.

# COMMAND ----------

# DBTITLE 1,INSERT INTO silver.lab_customer
# MAGIC %sql
# MAGIC -- Supondo que c_custkey = 1 existe em lab_customer
# MAGIC INSERT INTO lab_customer
# MAGIC VALUES
# MAGIC (
# MAGIC   1,
# MAGIC   'Duplicate Customer',
# MAGIC   'Duplicate Address',
# MAGIC   9999,
# MAGIC   '999-999-9999',
# MAGIC   9999.99,
# MAGIC   'DUPLICATE_SEGMENT',
# MAGIC   'Inserting a duplicate primary key for demonstration'
# MAGIC );

# COMMAND ----------

# MAGIC %md
# MAGIC ### Passo 6: Reverter para um estado limpo
# MAGIC
# MAGIC Para remover linhas problem√°ticas, podemos exclu√≠-las diretamente, truncar as tabelas ou usar a viagem do tempo Delta para reverter. Abaixo est√° um exemplo de exclus√£o das linhas violadoras adicionadas recentemente (certifique-se de ajustar as keys, se voc√™ inseriu valores diferentes).

# COMMAND ----------

# DBTITLE 1,DELETE FROM silver.lab_orders
# MAGIC %sql
# MAGIC -- Remova a viola√ß√£o de foreign key (orderkey=9999999)
# MAGIC DELETE FROM lab_orders
# MAGIC WHERE o_orderkey = 9999999;
# MAGIC

# COMMAND ----------

# DBTITLE 1,DELETE FROM silver.lab_customer
# MAGIC %sql
# MAGIC -- Remover a linha de primary key duplicada
# MAGIC DELETE FROM lab_customer
# MAGIC WHERE c_custkey = 1 
# MAGIC   AND c_name = 'Duplicate Customer';

# COMMAND ----------

# MAGIC %md
# MAGIC ### Passo 7: Visualizando o diagrama de ER no Databricks
# MAGIC
# MAGIC Com base em nossa defini√ß√£o de restri√ß√µes, podemos usar o Databricks para ver essas rela√ß√µes em um diagrama:
# MAGIC 1. No Databricks, navegue at√© o **Catalog** explorer √† esquerda.  
# MAGIC 2. Selecione o cat√°logo (com base na identidade do usu√°rio do laborat√≥rio) e, em seguida, o esquema (por exemplo, `silver`).  
# MAGIC 3. Localize a tabela `lab_orders`, que tem uma rela√ß√£o de foreign key com `lab_customer`.
# MAGIC 4. Clique no bot√£o **View Relationships** para visualizar o diagrama de suas tabelas e suas rela√ß√µes.  
# MAGIC
# MAGIC Voc√™ deve ver que `lab_orders` tem uma foreign key que referencia `lab_customer`.

# COMMAND ----------

# MAGIC %md
# MAGIC ###Passo 8: Desmontagem do laborat√≥rio para tabelas criadas
# MAGIC
# MAGIC Solte apenas as tabelas de laborat√≥rio prateadas que voc√™ criou, deixando suas tabelas TPC-H principais em bronze e o ambiente geral intacto.

# COMMAND ----------

# DBTITLE 1,DROP silver.lab_orders, DROP silver.lab_customer
# MAGIC %sql
# MAGIC DROP TABLE IF EXISTS lab_orders;
# MAGIC DROP TABLE IF EXISTS lab_customer;

# COMMAND ----------

# MAGIC %md
# MAGIC Remova todos os widgets criados durante a demonstra√ß√£o para limpar o ambiente do notebook.

# COMMAND ----------

dbutils.widgets.removeAll()

# COMMAND ----------

# MAGIC %md
# MAGIC ## Conclus√£o
# MAGIC Ao longo desta demonstra√ß√£o, aplicamos t√©cnicas de modelagem de data warehousing para criar e gerenciar tabelas no Databricks. Estabelecemos rela√ß√µes de primary and foreign key usando restri√ß√µes, inserimos dados e exploramos como o Databricks lida com viola√ß√µes de restri√ß√£o. Ao utilizar Entity Relationship Diagrams, visualizamos as rela√ß√µes de tabela e compreendemos seu significado estrutural. Ao final desta demonstra√ß√£o, voc√™ ter√° desenvolvido habilidades pr√°ticas em modelagem de dados relacionais, gerenciamento de esquemas e solu√ß√£o de problemas de erros em uma plataforma de dados modernos, capacitando-o a criar e gerenciar solu√ß√µes de dados escal√°veis.

# COMMAND ----------

# MAGIC %md
# MAGIC
# MAGIC &copy; 2025 Databricks, Inc. All rights reserved. Apache, Apache Spark, Spark, the Spark Logo, Apache Iceberg, Iceberg, and the Apache Iceberg logo are trademarks of the <a href="https://www.apache.org/">Apache Software Foundation</a>.<br/>
# MAGIC <br/><a href="https://databricks.com/privacy-policy">Privacy Policy</a> | 
# MAGIC <a href="https://databricks.com/terms-of-use">Terms of Use</a> | 
# MAGIC <a href="https://help.databricks.com/">Support</a>
