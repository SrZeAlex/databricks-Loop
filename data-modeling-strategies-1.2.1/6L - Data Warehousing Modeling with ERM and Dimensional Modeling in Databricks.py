# Databricks notebook source
# MAGIC %md
# MAGIC
# MAGIC <div style="text-align: center; line-height: 0; padding-top: 9px;">
# MAGIC   <img src="https://databricks.com/wp-content/uploads/2018/03/db-academy-rgb-1200px.png" alt="Databricks Learning">
# MAGIC </div>
# MAGIC

# COMMAND ----------

# MAGIC %md
# MAGIC # Modelagem de Data Warehousing com ERM e Modelagem Dimensional no Databricks
# MAGIC Neste laborat√≥rio, voc√™ explorar√° t√©cnicas modernas de data warehousing usando Databricks, come√ßando com Entity Relationship Modeling \(ERM\) e Dimensional Modeling. Voc√™ tamb√©m se aprofundar√° em abordagens avan√ßadas, como o Data Vault 2.0 e a engenharia de recursos de machine learning com o Reposit√≥rio de recursos de Databricks. Desde a defini√ß√£o de restri√ß√µes relacionais at√© o acompanhamento de altera√ß√µes hist√≥ricas com o SCD Tipo 2, o design de modelos de vault e a execu√ß√£o de infer√™ncias em lote, este laborat√≥rio equipa voc√™ para criar arquiteturas de dados escalon√°veis e prontas para an√°lise e fluxos de trabalho de ML em uma plataforma unificada.

# COMMAND ----------

# MAGIC %md
# MAGIC ## Objetivos de Aprendizagem
# MAGIC Ao final deste laborat√≥rio, voc√™ ser√° capaz de:
# MAGIC * Aplicar restri√ß√µes de primary e foreign key para manter a integridade relacional em tabelas Delta
# MAGIC * Construir modelos dimensionais usando t√©cnicas de Slowly Changing Dimension (SCD) Tipo 2
# MAGIC * Implementar componentes do Data Vault 2.0 (Hubs, Links, Sat√©lites) usando hash keys
# MAGIC * Projetar pipelines ETL escal√°veis para preencher e gerenciar esquemas relacionais, dimensionais e de Vault
# MAGIC * Criar e gerenciar tabelas de recursos usando o reposit√≥rio de recursos de Databricks
# MAGIC * Treinar modelos de machine learning usando recursos registrados para pipelines reproduz√≠veis
# MAGIC * Realizar infer√™ncia em lote, unindo dados de recursos e aplicando modelos treinados em escala

# COMMAND ----------

# MAGIC %md
# MAGIC ## üö®OBRIGAT√ìRIO - SELECT CLASSIC COMPUTE
# MAGIC Antes de executar c√©lulas neste notebook, selecione seu cluster de compute cl√°ssico no laborat√≥rio. Lembre-se de que **Serverless** est√° habilitado por default.
# MAGIC
# MAGIC Siga estas etapas para selecionar o cluster de compute cl√°ssico:
# MAGIC * Navegue at√© o canto superior direito deste notebook e clique no menu dropdown para selecionar seu cluster. Por default, o notebook usar√° **Serverless**. <br>
# MAGIC
# MAGIC ##### **üìå**Se o cluster estiver dispon√≠vel, selecione-o e continue para a pr√≥xima c√©lula. Se o cluster n√£o for mostrado:
# MAGIC   - Na lista dropdown, selecione **More**.
# MAGIC   - No pop-up **Attach to an existing compute resource**, selecione a primeira lista dropdown. Voc√™ ver√° um nome de cluster exclusivo nessa lista dropdown. Selecione esse cluster.
# MAGIC
# MAGIC **NOTA:** Se o cluster tiver sido encerrado, talvez seja necess√°rio reinici√°-lo para selecion√°-lo. Para fazer isso:
# MAGIC 1. Clique com o bot√£o direito do rato em **Compute** no painel de navega√ß√£o esquerdo e selecione *Open in new tab*.
# MAGIC 2. Localize o √≠cone de tri√¢ngulo √† direita do nome do cluster de compute e clique nele.
# MAGIC 3. Aguarde alguns minutos para que o cluster seja iniciado.
# MAGIC 4. Quando o cluster estiver em execu√ß√£o, conclua as etapas acima para selecion√°-lo.

# COMMAND ----------

# MAGIC %md
# MAGIC ## Requisitos
# MAGIC
# MAGIC Analise os seguintes requisitos antes de iniciar a demonstra√ß√£o:
# MAGIC
# MAGIC * Para executar este notebook, voc√™ precisa usar um dos seguintes Databricks runtime(s): **15.4.x-scala2.12**
# MAGIC * Como alternativa, em um cluster de tempo de execu√ß√£o n√£o-ML, instale manualmente as bibliotecas necess√°rias de maneira semelhante. (Para esta demonstra√ß√£o, temos um cluster n√£o-ML)

# COMMAND ----------

# MAGIC %md
# MAGIC ## Passo 1: Instale as bibliotecas necess√°rias e execute o script de instala√ß√£o
# MAGIC
# MAGIC **Tarefa 1:** Instale a biblioteca do Engenharia de recursos da Databricks para habilitar defini√ß√µes de tabela, cria√ß√£o de conjunto de treinamento e publica√ß√£o de recursos.

# COMMAND ----------

# MAGIC %pip install databricks-feature-engineering

# COMMAND ----------

# MAGIC %md
# MAGIC Uma vez que a biblioteca √© instalada, reiniciamos o kernel Python para que ele esteja totalmente dispon√≠vel.

# COMMAND ----------

dbutils.library.restartPython()

# COMMAND ----------

# MAGIC %md
# MAGIC **Tarefa 2:** Antes de prosseguir com o conte√∫do desta e de outras atividades do laborat√≥rio, certifique-se de ter executado o script de configura√ß√£o do laborat√≥rio.
# MAGIC Como resultado da execu√ß√£o do script, voc√™ criar√°:
# MAGIC 1. Um cat√°logo dedicado com o nome da sua conta de usu√°rio de laborat√≥rio.  
# MAGIC 2. Esquemas nomeados `bronze`, `silver` e `gold` dentro do cat√°logo.  
# MAGIC 3. Tabelas TPC-H copiadas de Amostras para a esquema `bronze`.

# COMMAND ----------

# MAGIC %run ./Includes/setup/lab_setup

# COMMAND ----------

# MAGIC %md
# MAGIC ### Passo 2: Escolha o cat√°logo e a esquema de trabalho
# MAGIC
# MAGIC Ao longo deste laborat√≥rio, voc√™ pode criar novas tabelas em `silver` (ou outra esquema de sua escolha). 
# MAGIC Para demonstra√ß√£o, usaremos a esquema `silver` no cat√°logo espec√≠fico do usu√°rio.

# COMMAND ----------

import re
from databricks.feature_store import FeatureStoreClient

fs = FeatureStoreClient()

# Obter o usu√°rio atual e extrair o nome do cat√°logo dividindo o e-mail em '@' e tomando a primeira parte
user_id = spark.sql("SELECT current_user()").collect()[0][0].split("@")[0]

# Substitua todos os caracteres especiais no `user_id` por um sublinhado '_' para criar o nome do cat√°logo
catalog_name = re.sub(r'[^a-zA-Z0-9]', '_', user_id) # C√≥digo novo

# Defina o nome da esquema prata a ser usado
silver_schema = "silver"
gold_schema = "gold"

print("Catalog and schemas set for feature development.")

# COMMAND ----------

# Criar um widget para capturar o nome do cat√°logo e todos os nomes de esquema
dbutils.widgets.text("catalog_name", catalog_name)
dbutils.widgets.text("silver_schema", silver_schema)
dbutils.widgets.text("gold_schema", gold_schema)

# COMMAND ----------

# MAGIC %sql
# MAGIC -- Defina o cat√°logo atual para o nome do cat√°logo extra√≠do
# MAGIC USE CATALOG IDENTIFIER(:catalog_name)

# COMMAND ----------

# MAGIC %sql
# MAGIC -- Defina o esquema atual para o nome do esquema definido
# MAGIC USE SCHEMA IDENTIFIER(:silver_schema)

# COMMAND ----------

# MAGIC %sql
# MAGIC -- Exibir os nomes default do cat√°logo e do esquema
# MAGIC SELECT current_catalog() AS Catalog_Name, current_schema() AS Schema_Name;

# COMMAND ----------

# Definir o cat√°logo e o esquema default no spark sql
spark.sql(f"USE CATALOG {catalog_name}")
spark.sql(f"USE SCHEMA {silver_schema}")

# COMMAND ----------

# MAGIC %md
# MAGIC ### **Passo 3: Criar tabelas com restri√ß√µes**  
# MAGIC
# MAGIC **Tarefa 1:**  
# MAGIC Crie duas tabelas com restri√ß√µes de **Primary Key (PK) e Foreign Key (FK):**:  
# MAGIC
# MAGIC 1. **Create `lab_customer`** com uma primary key em `c_custkey`.  
# MAGIC 2. **Create `lab_orders`** com:  
# MAGIC    - Uma primary key em `o_orderkey`.  
# MAGIC    - Uma foreign key em `o_custkey` referenciando `lab_customer(c_custkey)`.  
# MAGIC
# MAGIC **Nota:**  
# MAGIC - A Databricks n√£o imp√µe restri√ß√µes PK/FK, mas as usa para relacionamentos em **Entity Relationship Diagrams (ERDs)** no Catalog Explorer.  
# MAGIC - As restri√ß√µes de `NOT NULL` e `CHECK` s√£o aplicadas.

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Criar a tabela lab_customer com uma restri√ß√£o PRIMARY KEY no c_custkey
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC Verifique o cat√°logo e a esquema atuais.

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Verificar cat√°logo atual
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Verificar o esquema atual
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC **Tarefa 2:**  
# MAGIC Crie a tabela `lab_orders` com as seguintes restri√ß√µes:  
# MAGIC    - Uma **Primary Key (PK)** em `o_orderkey`.  
# MAGIC    - Uma **Foreign Key (FK)** na `o_custkey` referenciando `lab_customer(c_custkey)`.
# MAGIC
# MAGIC **Nota:**  
# MAGIC    - Use o nome do cat√°logo default real para a palavra-chave `REFERENCES`.
# MAGIC
# MAGIC **Exemplo de linha de c√≥digo de destino:**  
# MAGIC ```dbsql
# MAGIC CONSTRAINT fk_custkey FOREIGN KEY (o_custkey) REFERENCES <default_catalog_name>.silver.lab_customer
# MAGIC ```
# MAGIC
# MAGIC Neste exemplo, substitua o valor '<default_catalog_name>' pelo valor real da sa√≠da da query anterior.

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Criar a tabela lab_orders com PRIMARY KEY no o_orderkey
# MAGIC ---- e uma FOREIGN KEY referenciando lab_customer(c_custkey)
# MAGIC ---- Nota: Forne√ßa REFERENCES com namespace de tr√™s n√≠veis
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC ###Passo 4: Inserir dados das tabelas bronze TPC-H
# MAGIC
# MAGIC **Tarefa:**  
# MAGIC Preencha as tabelas rec√©m-criadas `lab_customer` e `lab_orders` com dados das tabelas TPC-H localizadas na esquema `bronze`.

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Inserir dados no lab_customer de bronze.customer
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Inserir dados no lab_orders de bronze.pedidos
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC ###Passo 5: Demonstrar viola√ß√µes `CONSTRAINT`
# MAGIC
# MAGIC **Tarefa:** Validar comportamento de restri√ß√£o  
# MAGIC
# MAGIC Como a Databricks n√£o imp√µe restri√ß√µes de primary e foreign key, execute as seguintes etapas para observar seu comportamento:  
# MAGIC
# MAGIC 1. **Foreign Key Test:** Insira uma linha em `lab_orders` com um `o_custkey` que n√£o existe em `lab_customer`.  
# MAGIC 2. **Primary Key Test:** Insira uma linha duplicada em `lab_customer` usando um `c_custkey` j√° existente.  
# MAGIC
# MAGIC Analise os resultados para confirmar que essas opera√ß√µes s√£o bem-sucedidas sem imposi√ß√£o de restri√ß√µes.

# COMMAND ----------

# MAGIC %md
# MAGIC **Tarefa 1:** Testar restri√ß√£o de Foreign Key  
# MAGIC
# MAGIC Insira uma linha em `lab_orders` com uma `o_custkey` que n√£o existe em `lab_customer`. Como a Databricks n√£o imp√µe restri√ß√µes de foreign key, verifique se a inser√ß√£o √© bem-sucedida sem erros.

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Teste de Restri√ß√£o de Foreign Key
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC **Tarefa 2:** Testar restri√ß√£o de Primary Key  
# MAGIC
# MAGIC Insira uma linha duplicada em `lab_customer` usando um valor `c_custkey` que j√° existe na tabela. Como a Databricks n√£o imp√µe restri√ß√µes de primary key, verifique se a inser√ß√£o √© permitida sem erros.

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Teste de restri√ß√£o de Primary Key ----
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC ### Passo 6: Reverter para um estado limpo
# MAGIC
# MAGIC **Tarefa:** Reverter para um estado limpo  
# MAGIC
# MAGIC Remova as linhas violadoras de `lab_customer` e `lab_orders` para restaurar um estado limpo. Escolha uma das seguintes abordagens:  
# MAGIC
# MAGIC - **Delete specific rows**: Remova manualmente as linhas violadoras adicionadas recentemente especificando suas keys.  
# MAGIC - **Truncate tables**: Limpe todos os dados, mantendo a estrutura da tabela intacta.  
# MAGIC - **Use Viagem do Tempo Delta**: Reverta a tabela para uma vers√£o anterior antes que as viola√ß√µes de restri√ß√£o ocorressem.  
# MAGIC
# MAGIC Certifique-se de ajustar as keys de acordo se valores diferentes foram inseridos.

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Remover a viola√ß√£o de foreign key (orderkey=9999999)
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Remover a linha de primary key duplicada
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC ### Passo 7: Visualizando o diagrama de ER na Databricks
# MAGIC
# MAGIC **Tarefa:** Visualizar o diagrama de ER na Databricks  
# MAGIC
# MAGIC Use a Databricks para explorar as rela√ß√µes entre suas tabelas:  
# MAGIC
# MAGIC 1. Abra **Databricks** e navegue at√© o **Catalog Explorer** no painel esquerdo.  
# MAGIC 2. Selecione seu **catalog** atribu√≠do e abra o **schema** (por exemplo, `silver`).  
# MAGIC 3. Localize a tabela `lab_orders`, que cont√©m uma foreign key de refer√™ncia `lab_customer`.  
# MAGIC 4. Clique em **View Relationships** para visualizar o **Entity Relationship (ER) Diagram** mostrando a conex√£o entre `lab_orders` e `lab_customer`.

# COMMAND ----------

# MAGIC %md
# MAGIC ### Passo 8: Defini√ß√µes de tabela
# MAGIC
# MAGIC **Tarefa 1:** Definir tabelas Prata
# MAGIC
# MAGIC Crie **refined tables** no **silver schema** para padronizar e limpar os dados.  
# MAGIC
# MAGIC 1. **Define the `refined_customer` table** com base na tabela TPC-H `customer` .  
# MAGIC 2. **Define the `refined_orders` table** com base na tabela TPC-H `orders` .  
# MAGIC 3. **Standardize column names** para manter a consist√™ncia.  
# MAGIC
# MAGIC Essas tabelas ser√£o usadas na pr√≥xima etapa para carregamento de dados.

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Defina o esquema atual para o nome do silver_schema extra√≠do no DBSQL
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Criar a tabela refined_customer se ela ainda n√£o existir
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Criar a tabela refined_orders se ela ainda n√£o existir
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC **Tarefa 2: Criar tabelas Ouro (Star Schema)**  
# MAGIC
# MAGIC Defina as **gold tables** usando um **star schema** para an√°lises e relat√≥rios.  
# MAGIC
# MAGIC 1. **Create `DimCustomer`** com atributos SCD (Slowly Changing Dimension) Tipo 2, incluindo:  
# MAGIC    - `start_date`, `end_date`, e `is_current` para rastreamento hist√≥rico.  
# MAGIC    - `GENERATED ALWAYS AS IDENTITY` para keys de substitui√ß√£o.  
# MAGIC
# MAGIC 2. **Create `DimDate`** para armazenar atributos relacionados √† data para an√°lise.  
# MAGIC
# MAGIC 3. **Create `FactOrders`** como a tabela de fatos central, vinculando-se a tabelas de dimens√µes.  
# MAGIC
# MAGIC Essas tabelas ser√£o usadas para otimizar o desempenho da query e oferecer suporte ao controle hist√≥rico.

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Definir o esquema atual para o nome do gold_schema extra√≠do no DBSQL
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Criar a tabela DimCustomer para armazenar detalhes do cliente com atributos Slowly Changing Dimension (SCD) Tipo 2 para rastreamento hist√≥rico
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Criar a tabela Simple DimDate para armazenar informa√ß√µes relacionadas √† data
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Verificar cat√°logo atual
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Verificar o esquema atual
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC **Tarefa 3:**  
# MAGIC Crie a tabela `FactOrders` referenciando as tabelas `DimCustomer` e `DimDate`.
# MAGIC
# MAGIC **Nota:**  
# MAGIC    - Use o nome do cat√°logo default real para a palavra-chave `REFERENCES`.
# MAGIC
# MAGIC **Exemplo de linha de c√≥digo de destino:**  
# MAGIC ```dbsql
# MAGIC CONSTRAINT fk_customer FOREIGN KEY (dim_customer_key) REFERENCES <default_catalog_name>.gold.DimCustomer(dim_customer_key),  -- Restri√ß√£o de Foreign key vinculando ao DimCustomer
# MAGIC
# MAGIC CONSTRAINT fk_date FOREIGN KEY (dim_date_key) REFERENCES <default_catalog_name>.gold.DimDate(dim_date_key)  -- Restri√ß√£o de Foreign key vinculando a DimDate
# MAGIC ```
# MAGIC
# MAGIC Neste exemplo, substitua o valor '<default_catalog_name>' pelo valor real da sa√≠da da query anterior.

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Criar a tabela FactOrders fazendo refer√™ncia √†s tabelas DimCustomer e DimDate
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC #### Notas sobre `GENERATED ALWAYS AS IDENTITY`
# MAGIC - Cada tabela gera automaticamente n√∫meros exclusivos para a coluna da key substituta.  
# MAGIC - Voc√™ n√£o insere um valor para essas colunas; A Delta lida com isso perfeitamente.

# COMMAND ----------

# MAGIC %md
# MAGIC ### Passo 9: Carregar dados na Prata
# MAGIC
# MAGIC **Tarefa:** Carregue dados das tabelas TPC-H `bronze` (`bronze.customer` e `bronze.orders`) para as tabelas rec√©m-criadas `refined_customer` e `refined_orders` no esquema **silver**.
# MAGIC
# MAGIC Passos a executar:
# MAGIC 1. Use a instru√ß√£o `SELECT` para extrair dados de `bronze.customer` e `bronze.orders`.
# MAGIC 2. Insira os dados nas tabelas respectivas **silver**: `refined_customer` e `refined_orders`.
# MAGIC
# MAGIC Certifique-se de que os dados sejam limpos e transformados conforme necess√°rio antes de serem carregados nas tabelas pratas.

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Alternar para o cat√°logo usando o nome do cat√°logo extra√≠do
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Alternar para a esquema prata
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Inserir dados transformados da tabela bronze.customer na tabela refined_customer
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Inserir dados transformados da tabela bronze.orders na tabela refined_orders
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC ### Passo 10: Validar os registros da tabela
# MAGIC **Tarefa:** Validar se os registros foram carregados com √™xito nas tabelas `refined_customer` e `refined_orders`.

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Exibir a contagem de registros na tabela refined_customer
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Exibir a contagem de registros na tabela refined_orders
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Exibir a contagem de registros na tabela refined_customer
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Exibir a contagem de registros na tabela refined_orders
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC ### Passo 11: Carga Inicial em Ouro (Modelo Dimensional)
# MAGIC
# MAGIC **Tarefa:** Execute a carga inicial de `DimCustomer`, `DimDate` e `FactOrders` na esquema **gold**.
# MAGIC
# MAGIC Passos a executar:
# MAGIC 1. Carregue todos os dados do cliente na tabela `DimCustomer` como entradas *current*.
# MAGIC    - Use uma instru√ß√£o `SELECT` para extrair dados do cliente da fonte refinada e inseri-los em `DimCustomer` como clientes atuais.
# MAGIC    
# MAGIC 2. Crie e insira entradas de data na tabela `DimDate` a partir dos dados `refined_orders`.
# MAGIC    - Se a tabela `DimDate` estiver pr√©-carregada com datas di√°rias por v√°rios anos, certifique-se de que todas as datas relevantes sejam preenchidas em `refined_orders` a partir de `DimDate`.
# MAGIC
# MAGIC 3. Preencha a tabela `FactOrders` vinculando cada pedido √†s keys de dimens√£o corretas (por exemplo, cliente, data).
# MAGIC    - Use o `JOIN` apropriado para vincular a tabela `refined_orders` com `DimCustomer` e `DimDate` e inserir os dados em `FactOrders`.
# MAGIC
# MAGIC Verifique se todas as keys de dimens√£o est√£o vinculadas corretamente e se as transforma√ß√µes necess√°rias foram aplicadas antes de carregar nas tabelas ouro.

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Alternar para o esquema ouro usando o comando USE SCHEMA SQL
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC ### 11.1 Carga inicial do DimCustomer (SCD Tipo 2)
# MAGIC
# MAGIC **Tarefa:** Executar a carga inicial de `DimCustomer` com a l√≥gica SCD Tipo 2.
# MAGIC
# MAGIC Passos a executar:
# MAGIC 1. Atualize todas as linhas da tabela `DimCustomer` com `start_date = CURRENT_DATE()`, `end_date = NULL`, e `is_current = TRUE` para todos os clientes.
# MAGIC    - Use uma instru√ß√£o `UPDATE` para definir esses valores para cada linha do cliente `DimCustomer`.

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Inserir dados na tabela de dimens√£o DimCustomer
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC ### 11.2 DimDate
# MAGIC
# MAGIC **Tarefa:** Preencher a tabela `DimDate` com valores exclusivos `order_date` de `refined_orders`.
# MAGIC
# MAGIC Passos a executar:
# MAGIC 1. Extraia valores exclusivos `order_date` de `refined_orders`.
# MAGIC    - Use uma query `SELECT DISTINCT order_date` para recuperar as datas exclusivas.
# MAGIC
# MAGIC 2. Use fun√ß√µes internas para dividir os valores `order_date` em componentes `day`, `month` e `year`.
# MAGIC    - Aplicar fun√ß√µes de data para extrair `day`, `month` e `year` de `order_date`.
# MAGIC
# MAGIC 3. Insira os valores de data dividida na tabela `DimDate`.
# MAGIC    - Use uma query `INSERT INTO DimDate` com os componentes de data transformados.

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Inserir datas distintas na tabela de dimens√£o DimDate
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC ### 11.3 FactOrders
# MAGIC
# MAGIC **Tarefa:** Preencha a tabela `FactOrders` vinculando cada ordem a `DimCustomer` e `DimDate`.
# MAGIC
# MAGIC Passos a executar:
# MAGIC 1. Una `refined_orders` com `DimCustomer` usando `(customer_id = dc.customer_id AND is_current = TRUE)` para garantir que apenas clientes ativos estejam vinculados.
# MAGIC    - Use um `JOIN` entre `refined_orders` e `DimCustomer` em `customer_id` e filtre com `is_current = TRUE`.
# MAGIC
# MAGIC 2. Vincule cada pedido a `DimDate` com base em `order_date`.
# MAGIC    - Use um `JOIN` entre `refined_orders` e `DimDate` em `order_date`.
# MAGIC
# MAGIC 3. Insira os dados unidos na tabela `FactOrders`.
# MAGIC    - Use uma instru√ß√£o `INSERT INTO FactOrders` para carregar os dados.

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Inserir dados na tabela FactOrders
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC #### Valida√ß√£o
# MAGIC
# MAGIC **Tarefa:** Validar as contagens de registros em cada tabela **gold**.
# MAGIC
# MAGIC Passos a executar:
# MAGIC 1. Verifique a contagem de registros na tabela `DimCustomer`.
# MAGIC    - Use `SELECT COUNT(*) FROM DimCustomer` para verificar o n√∫mero de registros.
# MAGIC
# MAGIC 2. Verifique a contagem de registros na tabela `DimDate`.
# MAGIC    - Use `SELECT COUNT(*) FROM DimDate` para verificar o n√∫mero de registros.
# MAGIC
# MAGIC 3. Verifique a contagem de registros na tabela `FactOrders`.
# MAGIC    - Use `SELECT COUNT(*) FROM FactOrders` para verificar o n√∫mero de registros.
# MAGIC
# MAGIC Verifique se o n√∫mero esperado de registros est√° presente em cada tabela ap√≥s a carga inicial.

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Exibir a contagem de registros para a tabela DimCustomer
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Exibir a contagem de registros para a tabela DimDate
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Exibir a contagem de registros para a tabela FactOrders
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC ## Passo 12: Atualiza√ß√µes incrementais (SCD Tipo 2 MERGE)
# MAGIC
# MAGIC **Tarefa:** Executar atualiza√ß√µes incrementais em `DimCustomer` para altera√ß√µes nos dados do cliente.
# MAGIC
# MAGIC Passos a executar:
# MAGIC 1. Detectar altera√ß√µes em `refined_customer` (por exemplo, endere√ßo alterado, novo cliente).
# MAGIC 2. Use uma instru√ß√£o **MERGE** para fechar o registro antigo e inserir um novo registro em uma √∫nica opera√ß√£o.
# MAGIC    - Atualize o registro existente em `DimCustomer` definindo `end_date = CURRENT_DATE()` e `is_current = FALSE`.
# MAGIC    - Insira um novo registro com atributos atualizados: `start_date = CURRENT_DATE()`, `end_date = NULL` e `is_current = TRUE`.

# COMMAND ----------

# MAGIC %md
# MAGIC ### 12.1 Exemplo: Criar altera√ß√µes incrementais fict√≠cias
# MAGIC
# MAGIC **Tarefa:** Simular altera√ß√µes incrementais para dados do cliente.
# MAGIC
# MAGIC Passos a executar:
# MAGIC 1. Crie uma altera√ß√£o fict√≠cia para um cliente existente (por exemplo, `customer_id = 101`) alterando seu endere√ßo.
# MAGIC 2. Crie uma entrada fict√≠cia para um novo cliente (por exemplo, `customer_id = 99999`).

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Criar uma exibi√ß√£o tempor√°ria simulando atualiza√ß√µes incrementais, incluindo um cliente existente com informa√ß√µes atualizadas e um novo cliente com detalhes iniciais
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Exibir o conte√∫do da exibi√ß√£o tempor√°ria para verificar os dados
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC ### 12.2 MERGE √∫nico para SCD Tipo 2
# MAGIC
# MAGIC **Tarefa:** Executar uma instru√ß√£o **MERGE** para lidar com atualiza√ß√µes e inser√ß√µes de novos clientes.
# MAGIC
# MAGIC Passos a executar:
# MAGIC 1. Crie uma instru√ß√£o `MERGE` que:
# MAGIC    - Identifica o registro antigo (caso o cliente j√° exista) e o marca como fechado (`is_current = FALSE`, `end_date = CURRENT_DATE()`).
# MAGIC    - Insere uma nova linha para qualquer cliente alterado (com atributos atualizados, `is_current = TRUE`, `start_date = CURRENT_DATE()`, e `end_date = NULL`).
# MAGIC    - Para novos clientes, insira apenas a nova linha com `is_current = TRUE`, `start_date = CURRENT_DATE()` e `end_date = NULL`.

# COMMAND ----------

# MAGIC %md
# MAGIC #### Explica√ß√£o:
# MAGIC
# MAGIC **Tarefa:** Entenda como a instru√ß√£o **MERGE** funciona.
# MAGIC
# MAGIC Passos a executar:
# MAGIC 1. Se o registro antigo for encontrado, atualize-o para fechar o registro atual definindo `is_current = FALSE` e `end_date = CURRENT_DATE()`.
# MAGIC 2. Para qualquer cliente novo ou alterado, insira um novo registro com `is_current = TRUE`, um novo `start_date` e n√£o `end_date`.

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Executar uma atualiza√ß√£o incremental usando uma instru√ß√£o MERGE para atualizar registros existentes e inserir novos registros na tabela DimCustomer com base em altera√ß√µes nos dados do cliente
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC ### 12.3 Validar as linhas atualizadas
# MAGIC
# MAGIC **Tarefa:** Validar as atualiza√ß√µes dos dados do cliente.
# MAGIC
# MAGIC Passos a executar:
# MAGIC 1. Query e exiba os detalhes do cliente existente com `customer_id = 101`.
# MAGIC    - Use `SELECT * FROM DimCustomer WHERE customer_id = 101` para visualizar as vers√µes antigas e novas.
# MAGIC 2. Query e exiba os detalhes do novo cliente com `customer_id = 99999`.
# MAGIC    - Use `SELECT * FROM DimCustomer WHERE customer_id = 99999` para visualizar o registro rec√©m-inserido.

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Query para exibir detalhes de um cliente existente com o customer_id 101
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Query para exibir detalhes de um novo cliente com o ID do cliente 99999
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC **Resultado esperado:**  
# MAGIC - Para `customer_id = 101`, o registro antigo ter√° `is_current = FALSE`, e uma nova vers√£o ser√° inserida com `is_current = TRUE`.
# MAGIC - Para `customer_id = 99999`, s√≥ existir√° um registro, com `is_current = TRUE`.

# COMMAND ----------

# MAGIC %md
# MAGIC ## Passo 13: Queries de exemplo na Star Schema
# MAGIC
# MAGIC **Tarefa:** Execute algumas queries de exemplo para analisar os dados nas tabelas `FactOrders`, `DimCustomer` e `DimDate`.

# COMMAND ----------

# MAGIC %md
# MAGIC ### 13.1 Contagens de linhas
# MAGIC
# MAGIC **Tarefa:** Exibir a contagem de registros nas tabelas `DimCustomer`, `DimDate` e `FactOrders`.
# MAGIC
# MAGIC Passos a executar:
# MAGIC 1. Query para exibir a contagem de registros na tabela `DimCustomer`.
# MAGIC    - Use `SELECT COUNT(*) FROM DimCustomer`.
# MAGIC
# MAGIC 2. Query para exibir a contagem de registros na tabela `DimDate`.
# MAGIC    - Use `SELECT COUNT(*) FROM DimDate`.
# MAGIC
# MAGIC 3. Query para exibir a contagem de registros na tabela `FactOrders`.
# MAGIC    - Use `SELECT COUNT(*) FROM FactOrders`.

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Exibir a contagem de registros na tabela DimCustomer com o nome da tabela
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Exibir a contagem de registros na tabela DimDate com o nome da tabela
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Exibir a contagem de registros na tabela FactOrders com o nome da tabela
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC ### 13.2 Exemplo de consulta: Principais Segmentos de Mercado
# MAGIC
# MAGIC **Tarefa:** Exibir o valor total gasto pelos clientes em cada segmento de mercado, limitado aos 10 principais segmentos.
# MAGIC
# MAGIC Passos a executar:
# MAGIC 1. Query para calcular o valor total gasto pelos clientes em cada segmento de mercado.
# MAGIC    - Use `SELECT market_segment, SUM(order_amount) AS total_spent FROM FactOrders f JOIN DimCustomer dc ON f.customer_id = dc.customer_id GROUP BY market_segment ORDER BY total_spent DESC LIMIT 10`.

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Exibir o valor total gasto pelos clientes em cada segmento de mercado, limitado aos 10 principais segmentos
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC ### 13.3 Exemplo de query: Contagens de pedidos por ano
# MAGIC
# MAGIC **Tarefa:** Conte o n√∫mero de pedidos para cada ano unindo a tabela `FactOrders` com a tabela `DimDate`.
# MAGIC
# MAGIC Passos a executar:
# MAGIC 1. Query para contar o n√∫mero de pedidos para cada ano.
# MAGIC    - Use `SELECT dd.year, COUNT(*) AS orders_count FROM FactOrders f JOIN DimDate dd ON f.dim_date_key = dd.dim_date_key GROUP BY dd.year ORDER BY dd.year`.

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Conte o n√∫mero de pedidos para cada ano unindo a tabela FactOrders com a tabela DimDate
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC ## Passo 14: Criando tabelas do Data Vault 2.0
# MAGIC
# MAGIC **Tarefa:** Criar componentes principais do Data Vault 2.0 ‚Äî Hubs, Links e Sat√©lites para modelar entidades de neg√≥cios e seus relacionamentos.

# COMMAND ----------

# MAGIC %md
# MAGIC Comece definindo o esquema prata como o esquema default no DBSQL.

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Alternar para o esquema prata usando o comando USE SCHEMA SQL
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC ### 14.1 Criar tabelas de Hub
# MAGIC
# MAGIC **Tarefa:** Criar tabelas de Hub para armazenar keys de neg√≥cios e metadados exclusivos.
# MAGIC
# MAGIC Passos a executar:
# MAGIC
# MAGIC 1. Crie a tabela `HubCustomer`.
# MAGIC    - Esta tabela armazena keys de neg√≥cios exclusivas do cliente.
# MAGIC
# MAGIC 2. Crie a tabela `HubOrder`.
# MAGIC    - Esta tabela armazena keys de neg√≥cios exclusivas de pedidos.

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Criar a tabela Hub para o Cliente
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Criar a tabela Hub para pedidos
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC ### 14.2 Criar tabelas de link
# MAGIC
# MAGIC **Tarefa:** Criar tabelas de link para representar relacionamentos entre entidades de neg√≥cios.
# MAGIC
# MAGIC Passos a executar:
# MAGIC
# MAGIC 1. Crie a tabela de `L_Customer_Order` link.
# MAGIC    - Esta tabela mapeia os clientes para seus pedidos usando keys compostas com hash.
# MAGIC

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Cria uma tabela de links para mapear clientes para seus pedidos com uma hashed primary key
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC ### 14.3 Criar tabela sat√©lite
# MAGIC
# MAGIC **Tarefa 1:** Criar tabelas sat√©lite para armazenar atributos descritivos e rastrear altera√ß√µes hist√≥ricas.
# MAGIC
# MAGIC Passos a executar:
# MAGIC
# MAGIC 1. Crie a tabela `Sat_Customer_Info`.
# MAGIC    - Esta tabela cont√©m informa√ß√µes descritivas sobre os clientes.
# MAGIC
# MAGIC 2. Crie a tabela `Sat_Order_Info`.
# MAGIC    - Esta tabela cont√©m informa√ß√µes descritivas sobre pedidos.

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Criar o sat√©lite para armazenar as informa√ß√µes descritivas do cliente
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Criar a tabela sat√©lite para armazenar as Informa√ß√µes Descritivas do Pedido
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC **Tarefa 2:** Defina o cat√°logo e o esquema default para opera√ß√µes do Spark SQL.
# MAGIC
# MAGIC Passos a executar:
# MAGIC
# MAGIC 1. Defina o cat√°logo default para o cat√°logo principal.
# MAGIC 2. Defina o esquema default como esquema prata.
# MAGIC

# COMMAND ----------

## Defina o cat√°logo default para seu cat√°logo principal e a esquema para o esquema prata no spark sql
## <FILL-IN>

# COMMAND ----------

# MAGIC %sql
# MAGIC -- Defina o cat√°logo atual para o nome do cat√°logo extra√≠do
# MAGIC USE CATALOG IDENTIFIER(:catalog_name)

# COMMAND ----------

# MAGIC %sql
# MAGIC -- Defina a esquema atual para o nome do esquema definido
# MAGIC USE SCHEMA IDENTIFIER(:silver_schema)

# COMMAND ----------

# MAGIC %md
# MAGIC ## Passo 15: Processo ETL
# MAGIC
# MAGIC **Tarefa:** Carregue dados refinados nas tabelas do Data Vault 2.0 seguindo uma abordagem ETL estruturada.
# MAGIC
# MAGIC As subetapas incluem:
# MAGIC 1. Carregando Hubs  
# MAGIC 2. Carregando links  
# MAGIC 3. Carregando Sat√©lites
# MAGIC

# COMMAND ----------

# MAGIC %md
# MAGIC ### 15.1 Definir fun√ß√µes auxiliares
# MAGIC
# MAGIC **Tarefa:** Definir fun√ß√µes Python para gerar hash keys e colunas de hash diff para clientes, pedidos e seus relacionamentos.
# MAGIC
# MAGIC Passos a executar:
# MAGIC 1. Defina uma fun√ß√£o para gerar hash keys do cliente.
# MAGIC 2. Defina uma fun√ß√£o para gerar hash keys de pedido.
# MAGIC 3. Defina uma fun√ß√£o para gerar hash keys de link de pedido do cliente.
# MAGIC 4. Defina uma fun√ß√£o para gerar uma coluna hash_diff para controle de altera√ß√µes.
# MAGIC

# COMMAND ----------

## Gere hash keys e colunas de hash diff para entidades do Data Vault, incluindo cliente, pedido e seus relacionamentos, usando MD5
## <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC ### 15.2 Carregar tabelas refinadas para a camada prata
# MAGIC
# MAGIC **Tarefa 1:** Crie tabelas de dimens√µes e fatos refinadas renomeando colunas e convertendo tipos de dados.
# MAGIC
# MAGIC Passos a executar:
# MAGIC 1. Crie a tabela de dimens√£o do cliente refinada na camada prata.
# MAGIC 2. Crie a tabela de fatos de pedidos refinados na camada prata.

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Cria uma tabela de dimens√µes do cliente refinada na camada prata
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Cria uma tabela de fatos de pedidos refinados na camada prata
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC **Tarefa 2:** Definir e executar fun√ß√µes de carga ETL.
# MAGIC
# MAGIC Passos a executar:
# MAGIC 1. Defina fun√ß√µes de carga ETL para clientes e pedidos.
# MAGIC 2. Execute as fun√ß√µes de carregamento ETL para preparar dados para tabelas do Data Vault.

# COMMAND ----------

## Definindo fun√ß√µes de carga ETL
## <FILL-IN>

# COMMAND ----------

## Executar carga ETL
## <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC ### 15.3 Carregar hub do cliente
# MAGIC
# MAGIC **Tarefa:** Carregue e mescle dados do cliente na tabela do hub H_Customer.
# MAGIC
# MAGIC Passos a executar:
# MAGIC 1. Aplique a gera√ß√£o de hash key aos dados refinados do cliente.
# MAGIC 2. Mescle novos registros de clientes com metadados na tabela de hub.
# MAGIC 3. Visualize os primeiros 10 registros no hub H_Customer.

# COMMAND ----------

## Carregue e mescle novos registros de clientes na tabela do hub H_Customer com hash key e metadados
## <FILL-IN>

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Visualizar os primeiros 10 registros da tabela de hub do H_Customer
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC ### 15.4 Carregar Sat√©lite do Cliente
# MAGIC
# MAGIC **Tarefa:** Carregar e mesclar dados descritivos do cliente na tabela sat√©lite S_Customer.
# MAGIC
# MAGIC Passos a executar:
# MAGIC 1. Gere hash_diff a partir de atributos descritivos do cliente.
# MAGIC 2. Mesclar registros na tabela sat√©lite com metadados.

# COMMAND ----------

## Mescle novos registros descritivos de clientes na tabela sat√©lite S_Customer com hash diff e metadados
## <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC ### 15.5 Hub de Ordem de Carga e Sat√©lite
# MAGIC
# MAGIC **Tarefa:** Carregue e mescle dados de pedidos nas tabelas sat√©lites H_Order e S_Order.
# MAGIC
# MAGIC Passos a executar:
# MAGIC 1. Gere hash keys para pedidos e hash_diff para campos descritivos.
# MAGIC 2. Mescle registros de pedidos nas tabelas hub e sat√©lite com metadados.

# COMMAND ----------

## Carregue e mescle novos registros de pedidos em tabelas de hub e sat√©lite com hash keys, hash diff e metadados
## <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC ### 15.6 Carregar link pedido do cliente
# MAGIC
# MAGIC **Tarefa:** Carregue e mescle dados de relacionamento pedido do cliente na tabela de link L_Customer_Order.
# MAGIC
# MAGIC Passos a executar:
# MAGIC 1. Gere uma hash key composta a partir de hash key do cliente e do pedido.
# MAGIC 2. Mesclar registros de link na tabela de links com metadados.

# COMMAND ----------

## Criar e mesclar registros de link do pedido do cliente com hash key e metadados combinados na tabela de links
## <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC ## Passo 16: Criando views de neg√≥cios
# MAGIC
# MAGIC **Tarefa:** Crie visualiza√ß√µes de neg√≥cios que unam Hubs, Links e Sat√©lites para simplificar as queries para usu√°rios finais.
# MAGIC
# MAGIC Passos a executar:
# MAGIC 1. Junte-se ao hub do cliente, ao sat√©lite do cliente, ao hub de encomendas e ao sat√©lite de encomendas utilizando a tabela Link.
# MAGIC 2. Crie uma view de neg√≥cios combinando detalhes do cliente e do pedido.
# MAGIC    - Esta view pode ser posteriormente materializada na camada Ouro.

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Crie uma View de Neg√≥cios combinando detalhes do Cliente e do Pedido (Isso pode ser materializado na camada Ouro, mas para este laborat√≥rio √© apresentado como uma view)
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC ## Passo 17: Exemplo de consulta
# MAGIC
# MAGIC Passo 17: Exemplo de query
# MAGIC
# MAGIC **Tarefa:** Execute uma query de exemplo para demonstrar como usar a view de neg√≥cios criada a partir do modelo do Data Vault.
# MAGIC
# MAGIC Passos a executar:
# MAGIC 1. Query o conte√∫do completo da view de neg√≥cios criada na etapa anterior.
# MAGIC 2. Calcula o total de vendas por cliente e apresenta resultados em ordem decrescente.

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Query o conte√∫do completo da view de neg√≥cios criada na etapa anterior
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Calcule o total de vendas por cliente e exiba os resultados em ordem decrescente
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC ## Passo 18: Etapas de verifica√ß√£o
# MAGIC
# MAGIC **Tarefa:** Executar a verifica√ß√£o b√°sica para garantir a integridade e a corre√ß√£o do modelo do Data Vault.
# MAGIC
# MAGIC Passos a executar:
# MAGIC
# MAGIC 1. Verifique o n√∫mero de registros em cada tabela do Data Vault (Hubs, Links e Sat√©lites).
# MAGIC 2. Verifique se cada pedido est√° associado a exatamente um cliente.
# MAGIC    - Contar pedidos com um e v√°rios clientes associados para garantir a integridade da liga√ß√£o.

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Verificar contagens de registros
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %sql
# MAGIC ---- Verifique se cada pedido est√° associado a exatamente um cliente
# MAGIC ---- <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC ## Passo 19: Criando ou atualizando recursos
# MAGIC
# MAGIC **Tarefa:** Crie recursos no n√≠vel do cliente usando as tabelas `refined_orders` e `refined_customer`.
# MAGIC
# MAGIC Recursos a serem criadas:
# MAGIC - `total_orders`: N√∫mero total de pedidos por cliente  
# MAGIC - `avg_order_value`: Pre√ßo m√©dio por pedido  
# MAGIC - `total_spending`: Valor total gasto no geral  
# MAGIC - `market_segment`: segmento de mercado do cliente

# COMMAND ----------

## Gere recursos b√°sicos no n√≠vel do cliente agregando dados do pedido e juntando com informa√ß√µes do cliente
## <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC ### 19.1: Registrar ou mesclar-atualizar tabela de recursos
# MAGIC
# MAGIC **Tarefa:** Crie uma tabela de recursos nomeada `customer_features` na esquema ouro. Se a tabela j√° existir, mescle os novos dados.

# COMMAND ----------

## Criar ou mesclar-atualizar a tabela 'customer_features' com recursos agregados no n√≠vel do cliente
## <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC ### 19.2: Atualiza√ß√µes de agendamento (Opcional)
# MAGIC
# MAGIC **Tarefa:** Crie um subconjunto deste notebook e agende-o como um Databricks Job para atualizar periodicamente os recursos com dados atualizados.
# MAGIC

# COMMAND ----------

# MAGIC %md
# MAGIC ## Passo 20: Treinamento de modelos com o Reposit√≥rio de recursos
# MAGIC
# MAGIC **Tarefa:** Treine um modelo de classifica√ß√£o bin√°rio usando recursos armazenadas no reposit√≥rio de recursos e dados refinados do cliente.
# MAGIC
# MAGIC Execute o seguinte:
# MAGIC 1. Crie um r√≥tulo simples: Os clientes que gastaram mais do que um determinado limite s√£o considerados "grandes gastadores."
# MAGIC 2. Procure os mesmos recursos via `FeatureLookup` para treinamento.
# MAGIC 3. Treine um modelo b√°sico de Regress√£o Log√≠stica.

# COMMAND ----------

# MAGIC %md
# MAGIC ### 20.1 Criar r√≥tulo bin√°rio para classifica√ß√£o
# MAGIC
# MAGIC **Tarefa:** Adicione um r√≥tulo bin√°rio ao dataset do cliente onde os gastadores altos (total_spending > limite) s√£o rotulados como 1, outros como 0.
# MAGIC
# MAGIC Passos a executar:
# MAGIC 1. Use as fun√ß√µes `when` e `otherwise` do PySpark para definir uma coluna de r√≥tulo.
# MAGIC 2. Selecione colunas de recursos e r√≥tulos relevantes para o treinamento do modelo.

# COMMAND ----------

## Adicionar r√≥tulo bin√°rio aos clientes com base em se seus gastos totais excedem um limite
## <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC ### 20.2 Crie um conjunto de treinamento com FeatureLookups
# MAGIC
# MAGIC **Tarefa:** Use o reposit√≥rio de recursos para procurar recursos pr√©-computados e associ√°-los aos dados do cliente rotulados.
# MAGIC
# MAGIC Passos a executar:
# MAGIC 1. Defina um objeto com nomes de recursos `FeatureLookup` e join keys necess√°rios.
# MAGIC 2. Remova colunas duplicadas do DataFrame rotulado para evitar conflitos.
# MAGIC 3. Crie um conjunto de treinamento usando `fs.create_training_set()` e carregue-o como um DataFrame do Spark.

# COMMAND ----------

## Crie um conjunto de treinamento pesquisando recursos do reposit√≥rio de recursos e juntando-os com dados rotulados
## <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC ### 20.3 Treinar um Modelo de Regress√£o Log√≠stica Simples
# MAGIC
# MAGIC **Tarefa:** Treine um modelo de regress√£o log√≠stica simples usando um pipeline que inclui transforma√ß√µes e classifica√ß√£o de recursos.
# MAGIC
# MAGIC Passos a executar:
# MAGIC 1. Codifique o √≠ndice e a coluna categ√≥rica one-hot `market_segment`.
# MAGIC 2. Use `VectorAssembler` para combinar recursos num√©ricos e codificados em um √∫nico vetor.
# MAGIC 3. Defina um modelo `LogisticRegression`.
# MAGIC 4. Crie um `Pipeline` com os est√°gios de transforma√ß√£o e ajuste o modelo no dataset de treinamento.

# COMMAND ----------

## Construir e treinar um modelo de regress√£o log√≠stica usando um pipeline com etapas de transforma√ß√£o de caracter√≠sticas
## <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC ### 20.4 Registrar modelo no MLflow (opcional)
# MAGIC
# MAGIC **Tarefa:** (Opcional) Registre o modelo treinado no MLflow para controle de vers√£o, rastreamento e implanta√ß√£o.
# MAGIC
# MAGIC **Observa√ß√£o:** Esta etapa √© opcional e n√£o est√° implementada neste bloco de anota√ß√µes de laborat√≥rio.

# COMMAND ----------

# MAGIC %md
# MAGIC ## Passo 21: Infer√™ncia em lote usando o reposit√≥rio de recursos
# MAGIC
# MAGIC **Cen√°rio**: Temos alguns IDs de clientes novos ou existentes e queremos prever quais podem ser os que gastam muito. Vamos fazer:
# MAGIC 1. Demonstrar a cria√ß√£o de um DataFrame de IDs de clientes.
# MAGIC 2. Procure as mesmos recursos via `FeatureLookup`.
# MAGIC 3. Gere previs√µes com nosso pipeline treinado.
# MAGIC
# MAGIC **Tarefa:** Prever clientes que gastam alto usando seus dados de recursos e um modelo de ML treinado.

# COMMAND ----------

# MAGIC %md
# MAGIC ### 21.1 Crie lista de clientes de amostra
# MAGIC
# MAGIC **Tarefa:** Selecione um pequeno conjunto de IDs de cliente para infer√™ncia em lote.
# MAGIC
# MAGIC Passos a executar:
# MAGIC 1. Selecione alguns IDs de cliente (por exemplo, 5 linhas) no DataFrame de treinamento.
# MAGIC 2. Adicione uma coluna de sinalizador chamada `batch_inference_example` para indicar que esse subconjunto √© para fins de demonstra√ß√£o.

# COMMAND ----------

## Selecione 5 clientes de amostra e adicione uma coluna de indicador para demonstra√ß√£o de infer√™ncia em lote
## <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC ### 21.2 Recuperar recursos e pontuar
# MAGIC
# MAGIC **Tarefa:** Pesquise recursos de reposit√≥rio de recursos para os clientes de exemplo e gere previs√µes usando o modelo treinado.
# MAGIC
# MAGIC Passos a executar:
# MAGIC 1. Use `FeatureLookup` para recuperar os recursos necess√°rios da tabela de recursos com base em `customer_id`.
# MAGIC 2. Crie um conjunto de infer√™ncias combinando clientes de amostra com os recursos pesquisados.
# MAGIC 3. Carregue o DataFrame de infer√™ncia e aplique o pipeline de modelo treinado.
# MAGIC 4. Exiba os r√≥tulos e probabilidades previstos para cada cliente.

# COMMAND ----------

## Realize infer√™ncia em lotes recuperando recursos para clientes de amostra e aplicando o modelo treinado
## <FILL-IN>

# COMMAND ----------

# MAGIC %md
# MAGIC ## Limpeza
# MAGIC Agora, limpe seu ambiente de trabalho.
# MAGIC
# MAGIC Execute o script abaixo para excluir o cat√°logo `catalog_name` e todos os seus objetos, se ele existir.

# COMMAND ----------

# Exclua o cat√°logo junto com todos os objetos (esquemas, tabelas) dentro.
spark.sql(f"DROP CATALOG IF EXISTS {catalog_name} CASCADE")

# COMMAND ----------

# MAGIC %md
# MAGIC Remova todos os widgets criados durante a demonstra√ß√£o para limpar o ambiente do notebook.

# COMMAND ----------

dbutils.widgets.removeAll()

# COMMAND ----------

# MAGIC %md
# MAGIC ## Conclus√£o
# MAGIC Neste laborat√≥rio, voc√™ praticou uma ampla variedade de t√©cnicas modernas de data warehousing e engenharia de recursos de ML no Databricks. Voc√™ modelou relacionamentos usando ERM, manipulou dados hist√≥ricos usando SCD Tipo 2 e aplicou a estrutura do Data Vault 2.0 para criar modelos de dados escalon√°veis e flex√≠veis. Voc√™ tamb√©m criou e gerenciou recursos com o reposit√≥rio de recursos de Databricks, treinou modelos de ML e realizou infer√™ncia em lote. Juntos, esses exerc√≠cios forneceram experi√™ncia pr√°tica no projeto de pipelines integrados de dados e ML para casos de uso anal√≠ticos do mundo real.

# COMMAND ----------

# MAGIC %md
# MAGIC
# MAGIC &copy; 2025 Databricks, Inc. All rights reserved. Apache, Apache Spark, Spark, the Spark Logo, Apache Iceberg, Iceberg, and the Apache Iceberg logo are trademarks of the <a href="https://www.apache.org/">Apache Software Foundation</a>.<br/>
# MAGIC <br/><a href="https://databricks.com/privacy-policy">Privacy Policy</a> | 
# MAGIC <a href="https://databricks.com/terms-of-use">Terms of Use</a> | 
# MAGIC <a href="https://help.databricks.com/">Support</a>
