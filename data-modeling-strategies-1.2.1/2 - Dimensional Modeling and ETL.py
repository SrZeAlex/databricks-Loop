# Databricks notebook source
# MAGIC %md
# MAGIC
# MAGIC <div style="text-align: center; line-height: 0; padding-top: 9px;">
# MAGIC   <img src="https://databricks.com/wp-content/uploads/2018/03/db-academy-rgb-1200px.png" alt="Databricks Learning">
# MAGIC </div>
# MAGIC

# COMMAND ----------

# MAGIC %md
# MAGIC # Modelagem Dimensional e ETL
# MAGIC Nesta demonstra√ß√£o, exploraremos como implementar Slowly Changing Dimensions (SCD) Tipo 2 usando Databricks em uma star schema. Voc√™ trabalhar√° no processo de cria√ß√£o de tabelas de dimens√µes e fatos, aplica√ß√£o de transforma√ß√µes de dados e manuten√ß√£o de registros hist√≥ricos usando SCD Tipo 2. Este exerc√≠cio pr√°tico fortalecer√° suas habilidades de modelagem de dados e ETL usando o Spark SQL e o Delta Lake.

# COMMAND ----------

# MAGIC %md
# MAGIC ## Objetivos de Aprendizagem
# MAGIC Ao final desta demonstra√ß√£o, voc√™ ser√° capaz de:
# MAGIC - Aplicar conceitos de SCD Tipo 2 para rastrear mudan√ßas hist√≥ricas em tabelas de dimens√µes usando Databricks.
# MAGIC - Projetar uma star schema para querying e an√°lise eficientes em um ambiente de data warehouse.
# MAGIC - Construir pipelines de ETL usando Spark SQL e Delta Lake para transformar e carregar dados.
# MAGIC - Avaliar a precis√£o e completude dos dados utilizando t√©cnicas de valida√ß√£o de dados.
# MAGIC - Desenvolver fluxos de trabalho de dados escal√°veis e automatizados usando Databricks notebooks.

# COMMAND ----------

# MAGIC %md
# MAGIC ## Tarefas a Executar
# MAGIC
# MAGIC Neste notebook, exploraremos como construir um *modelo dimensional* (especificamente, uma star schema) a partir de nossos dados TPC-H, usando tabelas **silver** (refinadas) e **gold** (dimens√µes e fatos).
# MAGIC
# MAGIC Ao fazer isso, percorreremos as seguintes etapas:
# MAGIC
# MAGIC 1. **Define Our Table Structures**: Entenda como `GENERATED ALWAYS AS IDENTITY` funciona e crie todas as tabelas necess√°rias (prata e ouro).  
# MAGIC 2. **Load the Silver Layer**: Mova dados de tabelas `bronze` TPC-H (brutas) para as tabelas refinadas, aplicando as transforma√ß√µes necess√°rias (renomeando colunas, cortando strings, normalizando tipos de dados).  
# MAGIC 3. **Create an SCD Type 2 Dimension**: Explore como criar uma Dimens√£o de Mudan√ßa Lenta que preserve o hist√≥rico de registros alterados.  
# MAGIC 4. **Load the Gold Layer**: Preencha as tabelas de dimens√µes e fatos com dados **initial** e **incremental**. Demonstrar como usar instru√ß√£o √∫nica `MERGE` para atualiza√ß√µes SCD Tipo 2.  
# MAGIC 5. **Validate and Explore Sample Queries**: Verifique nossas cargas de dados e query nosso novo esquema de estrelas para obter percep√ß√µes.  
# MAGIC
# MAGIC No final, teremos um esquema de estrela **gold** com uma dimens√£o **SCD Tipo 2** (`DimCustomer`) que rastreia as mudan√ßas hist√≥ricas.

# COMMAND ----------

# MAGIC %md
# MAGIC ## Pr√©-requisitos
# MAGIC Como lembrete, voc√™ j√° deve ter executado um **script de configura√ß√£o** no notebook anterior que criou:  
# MAGIC    - Um cat√°logo espec√≠fico do usu√°rio.  
# MAGIC    - Esquemas: `bronze`, `silver` e `gold`.  
# MAGIC    - Tabelas TPC-H copiadas para `bronze`.
# MAGIC
# MAGIC Se, por qualquer motivo, voc√™ ainda n√£o tiver realizado essa configura√ß√£o, retorne agora para **1 - Modelagem de Entidades e Relacionamentos e Manipula√ß√£o de Restri√ß√µes** e execute o comando '%run' na c√©lula 8 desse notebook.

# COMMAND ----------

# MAGIC %md
# MAGIC ## üö®OBRIGAT√ìRIO - SELECT CLASSIC COMPUTE
# MAGIC
# MAGIC Antes de executar c√©lulas neste notebook, selecione seu cluster de compute cl√°ssico no laborat√≥rio. Lembre-se de que **Serverless** est√° habilitado por default.
# MAGIC
# MAGIC Siga estas etapas para selecionar o cluster de compute cl√°ssico:
# MAGIC * Navegue at√© o canto superior direito deste notebook e clique no menu dropdown para selecionar seu cluster. Por default, o notebook usar√° **Serverless**. <br>
# MAGIC
# MAGIC ##### **üìå**Se o cluster estiver dispon√≠vel, selecione-o e continue para a pr√≥xima c√©lula. Se o cluster n√£o for mostrado:
# MAGIC   - Na lista suspensa, selecione **More**.
# MAGIC   - No pop-up **Attach to an existing compute resource**, selecione a primeira lista dropdown. Voc√™ ver√° um nome de cluster exclusivo nessa lista dropdown. Selecione esse cluster.
# MAGIC
# MAGIC **NOTA:** Se o cluster tiver sido encerrado, talvez seja necess√°rio reinici√°-lo para selecion√°-lo. Para fazer isso:
# MAGIC 1. Clique com o bot√£o direito do rato em **Compute** no painel de navega√ß√£o esquerdo e selecione *Open in new tab*.
# MAGIC 2. Localize o √≠cone de tri√¢ngulo √† direita do nome do cluster de compute e clique nele.
# MAGIC 3. Aguarde alguns minutos para que o cluster seja iniciado.
# MAGIC 4. Quando o cluster estiver em execu√ß√£o, conclua as etapas acima para selecion√°-lo.

# COMMAND ----------

# MAGIC %md
# MAGIC ## Requisitos
# MAGIC
# MAGIC Analise os seguintes requisitos antes de iniciar a demonstra√ß√£o:
# MAGIC
# MAGIC * Para executar este notebook, voc√™ precisa usar um dos seguintes Databricks runtime(s): **15.4.x-scala2.12**

# COMMAND ----------

# MAGIC %md
# MAGIC ---

# COMMAND ----------

# MAGIC %md
# MAGIC ## Parte 1: Defini√ß√µes de tabela
# MAGIC
# MAGIC Para explorar a modelagem dimensional, definiremos:  
# MAGIC - Tabelas **Prata** (√†s vezes chamadas de camada *refined* ou *integration*).  
# MAGIC - Tabelas **Gold** que implementam um **star schema** com uma dimens√£o SCD Tipo 2.  
# MAGIC
# MAGIC Um recurso importante que usaremos no Delta `GENERATED ALWAYS AS IDENTITY`, que atribui automaticamente valores num√©ricos incrementais para chaves substitutas.

# COMMAND ----------

# MAGIC %md
# MAGIC ### 1.1 Defina seu cat√°logo

# COMMAND ----------

# DBTITLE 1,USE CATALOG
import re

# Obtenha o e-mail do usu√°rio atual e extraia o nome do cat√°logo dividindo em '@' e tomando a primeira parte
user_id = spark.sql("SELECT current_user()").collect()[0][0].split("@")[0]

# Substitua todos os caracteres especiais no `user_id` por um sublinhado '_' para criar o nome do cat√°logo
catalog_name = re.sub(r'[^a-zA-Z0-9]', '_', user_id)

# COMMAND ----------

# Defina o nome do esquema para as camadas prata e ouro
silver_schema = "silver"
gold_schema = "gold"

# COMMAND ----------

# Criar um widget para capturar o nome do cat√°logo e todos os nomes de esquema
dbutils.widgets.text("catalog_name", catalog_name)
dbutils.widgets.text("silver_schema", silver_schema)
dbutils.widgets.text("gold_schema", gold_schema)

# COMMAND ----------

# MAGIC %sql
# MAGIC -- Defina o cat√°logo atual como o nome do cat√°logo extra√≠do no DBSQL
# MAGIC USE CATALOG IDENTIFIER(:catalog_name);

# COMMAND ----------

# MAGIC %md
# MAGIC ### 1.2 Criar tabelas Pratas
# MAGIC
# MAGIC O esquema **silver** normalmente √© um local para dados refinados. Definiremos dois exemplos de tabelas refinadas:  
# MAGIC - `refined_customer` (baseado em TPC-H `customer`)  
# MAGIC - `refined_orders` (baseado em TPC-H `orders`)
# MAGIC
# MAGIC Cada tabela renomear√° e padronizar√° colunas. N√≥s s√≥ definimos o esquema aqui; Carregaremos os dados em seguida.

# COMMAND ----------

# MAGIC %sql
# MAGIC -- Defina o esquema atual para o nome do silver_schema extra√≠do no DBSQL
# MAGIC USE SCHEMA IDENTIFIER(:silver_schema);

# COMMAND ----------

# DBTITLE 1,CREATE TABLE IF NOT EXISTS refined_customer
# MAGIC %sql
# MAGIC -- Criando a tabela refined_customer se ela ainda n√£o existir
# MAGIC CREATE TABLE IF NOT EXISTS refined_customer (
# MAGIC   customer_id INT,            -- Identificador exclusivo para o cliente
# MAGIC   name STRING,                -- Nome do cliente
# MAGIC   address STRING,             -- Endere√ßo do cliente
# MAGIC   nation_key INT,             -- Foreign key ligando √† tabela de na√ß√£o
# MAGIC   phone STRING,               -- N√∫mero de telefone do cliente
# MAGIC   acct_bal DECIMAL(12, 2),    -- Saldo da conta do cliente
# MAGIC   market_segment STRING,      -- Segmento de mercado do cliente
# MAGIC   comment STRING              -- Coment√°rios adicionais sobre o cliente
# MAGIC );

# COMMAND ----------

# DBTITLE 1,CREATE TABLE IF NOT EXISTS refined_orders
# MAGIC %sql
# MAGIC -- Criando a tabela refined_orders se ela ainda n√£o existir
# MAGIC CREATE TABLE IF NOT EXISTS refined_orders (
# MAGIC   order_id INT,                -- Identificador exclusivo para o pedido
# MAGIC   customer_id INT,             -- Foreign key ligando √† tabela do cliente
# MAGIC   order_status STRING,         -- Estado do pedido (por exemplo, pendente, enviado)
# MAGIC   total_price DECIMAL(12, 2),  -- Pre√ßo total do pedido
# MAGIC   order_date DATE,             -- Data em que o pedido foi feito
# MAGIC   order_priority STRING,       -- N√≠vel de prioridade do pedido
# MAGIC   clerk STRING,                -- Escritur√°rio que cuidou do pedido
# MAGIC   ship_priority INT,           -- Prioridade de envio do pedido
# MAGIC   comment STRING               -- Coment√°rios adicionais sobre o pedido
# MAGIC );

# COMMAND ----------

# MAGIC %md
# MAGIC ### 1.3 Criar tabelas Ouros (Star Schema)
# MAGIC
# MAGIC #### Definimos:
# MAGIC - **`DimCustomer`** (com atributos SCD Tipo 2)  
# MAGIC - **`DimDate`**  
# MAGIC - **`FactOrders`**  
# MAGIC
# MAGIC #### Principais Passos
# MAGIC 1. `GENERATED ALWAYS AS IDENTITY` para keys substitutas.  
# MAGIC 2. Colunas adicionais para `DimCustomer` gerenciar o SCD Tipo 2 (por exemplo, `start_date`, `end_date`, e `is_current`).

# COMMAND ----------

# MAGIC %sql
# MAGIC -- Defina o esquema atual como o nome do gold_schema extra√≠do no DBSQL
# MAGIC USE SCHEMA IDENTIFIER(:gold_schema);

# COMMAND ----------

# DBTITLE 1,CREATE TABLE IF NOT EXISTS DimCustomer
# MAGIC %sql
# MAGIC -- Crie a tabela DimCustomer para armazenar detalhes do cliente com atributos SCD (Slowly Changing Dimension) Tipo 2 para rastreamento hist√≥rico
# MAGIC CREATE TABLE IF NOT EXISTS DimCustomer
# MAGIC (
# MAGIC   dim_customer_key BIGINT GENERATED ALWAYS AS IDENTITY,  -- Key substituta para a tabela de dimens√µes
# MAGIC   customer_id INT,                                       -- Identificador exclusivo para o cliente
# MAGIC   name STRING,                                           -- Nome do cliente
# MAGIC   address STRING,                                        -- Endere√ßo do cliente
# MAGIC   nation_key INT,                                        -- Foreign key ligando √† tabela de na√ß√£o
# MAGIC   phone STRING,                                          -- N√∫mero de telefone do cliente
# MAGIC   acct_bal DECIMAL(12,2),                                -- Saldo da conta do cliente
# MAGIC   market_segment STRING,                                 -- Segmento de mercado do cliente
# MAGIC   comment STRING,                                        -- Coment√°rios adicionais sobre o cliente
# MAGIC   start_date DATE,                                       -- Data de in√≠cio do SCD2 indicando o in√≠cio da validade do registro
# MAGIC   end_date DATE,                                         -- Data de t√©rmino do SCD2 indicando o fim da validade do registro
# MAGIC   is_current BOOLEAN,                                    -- Sinalizador para indicar se o registro √© a vers√£o atual
# MAGIC   CONSTRAINT pk_dim_customer PRIMARY KEY (dim_customer_key)  -- Restri√ß√£o de Primary key na chave substituta
# MAGIC );

# COMMAND ----------

# DBTITLE 1,CREATE TABLE IF NOT EXISTS DimDate
# MAGIC %sql
# MAGIC -- Tabela DimDate simples para armazenar informa√ß√µes relacionadas √† data
# MAGIC CREATE TABLE IF NOT EXISTS DimDate (
# MAGIC   dim_date_key BIGINT GENERATED ALWAYS AS IDENTITY,  -- Key substituta para a tabela DimDate
# MAGIC   full_date DATE,                                    -- Valor de data completa
# MAGIC   day INT,                                           -- Dia do m√™s
# MAGIC   month INT,                                         -- M√™s do ano
# MAGIC   year INT,                                          -- Valor do ano
# MAGIC   CONSTRAINT pk_dim_date PRIMARY KEY (dim_date_key) RELY  -- Restri√ß√£o de Primary key no dim_date_key
# MAGIC );

# COMMAND ----------

# MAGIC %sql
# MAGIC -- Verifique o cat√°logo atual
# MAGIC SELECT current_catalog();

# COMMAND ----------

# MAGIC %sql
# MAGIC -- Verifique o esquema atual
# MAGIC SELECT current_schema();

# COMMAND ----------

# MAGIC %md
# MAGIC **Nota:** Substitua os valores `<default_catalog_name>` e `<default_schema_name>` em ambas as linhas no c√≥digo abaixo pelos nomes de cat√°logo e esquema default reais da sa√≠da da query nas c√©lulas anteriores:
# MAGIC
# MAGIC **Linhas de c√≥digo de destino:**
# MAGIC ```dbsql
# MAGIC CONSTRAINT fk_customer FOREIGN KEY (dim_customer_key) REFERENCES <default_catalog_name>.<default_schema_name>.DimCustomer(dim_customer_key),  -- Foreign key constraint linking to DimCustomer
# MAGIC
# MAGIC CONSTRAINT fk_date FOREIGN KEY (dim_date_key) REFERENCES <default_catalog_name>.<default_schema_name>.DimDate(dim_date_key)  -- Foreign key constraint linking to DimDate
# MAGIC ```

# COMMAND ----------

# DBTITLE 1,CREATE TABLE IF NOT EXISTS FactOrders
# MAGIC %sql
# MAGIC -- Cria√ß√£o da tabela FactOrders fazendo refer√™ncia a DimCustomer e DimDate
# MAGIC CREATE TABLE IF NOT EXISTS FactOrders (
# MAGIC   fact_orders_key BIGINT GENERATED ALWAYS AS IDENTITY,  -- Key substituta para a tabela FactOrders
# MAGIC   order_id INT,                                        -- Identificador exclusivo para o pedido
# MAGIC   dim_customer_key BIGINT,                             -- Foreign key vinculando √† tabela DimCustomer
# MAGIC   dim_date_key BIGINT,                                 -- Foreign key vinculando √† tabela DimDate
# MAGIC   total_price DECIMAL(12, 2),                          -- Pre√ßo total do pedido
# MAGIC   order_status STRING,                                 -- Estado do pedido (por exemplo, pendente, enviado)
# MAGIC   order_priority STRING,                               -- N√≠vel de prioridade do pedido
# MAGIC   clerk STRING,                                        -- Escritur√°rio que cuidou do pedido
# MAGIC   ship_priority INT,                                   -- Prioridade de envio do pedido
# MAGIC   comment STRING,                                      -- Coment√°rios adicionais sobre o pedido
# MAGIC   CONSTRAINT pk_fact_orders PRIMARY KEY (fact_orders_key),  -- Restri√ß√£o de Primary key no fact_orders_key
# MAGIC   CONSTRAINT fk_customer FOREIGN KEY (dim_customer_key) REFERENCES <default_catalog_name>.<default_schema_name>.DimCustomer(dim_customer_key),  -- Restri√ß√£o de Foreign key vinculando ao DimCustomer
# MAGIC   CONSTRAINT fk_date FOREIGN KEY (dim_date_key) REFERENCES <default_catalog_name>.<default_schema_name>.DimDate(dim_date_key)  -- Restri√ß√£o de Foreign key vinculando a DimDate
# MAGIC );

# COMMAND ----------

# MAGIC %md
# MAGIC #### Notas sobre `GENERATED ALWAYS AS IDENTITY`
# MAGIC - Cada tabela gera automaticamente n√∫meros exclusivos para a coluna da key substituta.  
# MAGIC - Voc√™ n√£o insere um valor para essas colunas; A Delta lida com isso perfeitamente.

# COMMAND ----------

# MAGIC %md
# MAGIC ---

# COMMAND ----------

# MAGIC %md
# MAGIC ## Parte 2: Carregando dados na Prata
# MAGIC
# MAGIC Carregaremos dados das tabelas TPC-H `bronze` em `refined_customer` e `refined_orders`. Esta etapa pressup√µe que seu dataset TPC-H esteja em `bronze.customer` e `bronze.orders`.

# COMMAND ----------

# MAGIC %sql
# MAGIC -- Alterne para o cat√°logo usando o nome do cat√°logo extra√≠do no DBSQL
# MAGIC USE CATALOG IDENTIFIER(:catalog_name);
# MAGIC
# MAGIC -- Alterne para o esquema prata no DBSQL
# MAGIC USE SCHEMA IDENTIFIER(:silver_schema);

# COMMAND ----------

# DBTITLE 1,INSERT INTO silver.refined_customer FROM bronze.customer
# MAGIC %sql
# MAGIC -- Insira dados transformados da tabela bronze.customer na tabela refined_customer
# MAGIC INSERT INTO
# MAGIC   refined_customer
# MAGIC SELECT
# MAGIC   c_custkey AS customer_id,                      -- Identificador exclusivo para o cliente
# MAGIC   TRIM(c_name) AS name,                          -- Nome do cliente
# MAGIC   TRIM(c_address) AS address,                    -- Endere√ßo do cliente
# MAGIC   c_nationkey AS nation_key,                     -- Foreign key ligando √† tabela de na√ß√£o
# MAGIC   TRIM(c_phone) AS phone,                        -- N√∫mero de telefone do cliente
# MAGIC   CAST(c_acctbal AS DECIMAL(12, 2)) AS acct_bal, -- Saldo da conta do cliente
# MAGIC   TRIM(c_mktsegment) AS market_segment,          -- Segmento de mercado do cliente
# MAGIC   TRIM(c_comment) AS comment                     -- Coment√°rios adicionais sobre o cliente
# MAGIC FROM
# MAGIC   bronze.customer;                               -- Tabela de origem na camada bronze

# COMMAND ----------

# DBTITLE 1,INSERT INTO silver.refined_orders FROM bronze.orders
# MAGIC %sql
# MAGIC -- Inserir dados transformados da tabela bronze.orders na tabela refined_orders
# MAGIC INSERT INTO
# MAGIC   refined_orders
# MAGIC SELECT
# MAGIC   o_orderkey AS order_id,                      -- Identificador exclusivo para o pedido
# MAGIC   o_custkey AS customer_id,                    -- Foreign key ligando √† tabela do cliente
# MAGIC   TRIM(o_orderstatus) AS order_status,         -- Estado do pedido (por exemplo, pendente, enviado)
# MAGIC   CAST(o_totalprice AS DECIMAL(12, 2)) AS total_price,  -- Pre√ßo total do pedido
# MAGIC   o_orderdate AS order_date,                   -- Data em que o pedido foi feito
# MAGIC   TRIM(o_orderpriority) AS order_priority,     -- N√≠vel de prioridade do pedido
# MAGIC   TRIM(o_clerk) AS clerk,                      -- Escritur√°rio que cuidou do pedido
# MAGIC   o_shippriority AS ship_priority,             -- Prioridade de envio do pedido
# MAGIC   TRIM(o_comment) AS comment                   -- Coment√°rios adicionais sobre o pedido
# MAGIC FROM
# MAGIC   bronze.orders;                               -- Tabela de origem na camada bronze

# COMMAND ----------

# MAGIC %md
# MAGIC #### Valida√ß√£o
# MAGIC Verifique se os registros foram carregados em `refined_customer` e `refined_orders`:

# COMMAND ----------

# DBTITLE 1,display(refined_customer), display(refined_orders)
# MAGIC %sql
# MAGIC -- Exibe a contagem de registros na tabela refined_customer
# MAGIC SELECT COUNT(*) AS refined_customer_count FROM refined_customer

# COMMAND ----------

# MAGIC %sql
# MAGIC -- Exibe a contagem de registros na tabela refined_orders
# MAGIC SELECT COUNT(*) AS refined_orders_count FROM refined_orders

# COMMAND ----------

# MAGIC %sql
# MAGIC -- Exibe a contagem de registros na tabela refined_customer
# MAGIC SELECT COUNT(*) AS refined_customer_count FROM refined_customer

# COMMAND ----------

# MAGIC %sql
# MAGIC -- Exibe a contagem de registros na tabela refined_orders
# MAGIC SELECT COUNT(*) AS refined_orders_count FROM refined_orders

# COMMAND ----------

# MAGIC %md
# MAGIC ---

# COMMAND ----------

# MAGIC %md
# MAGIC ## Parte 3: Carga Inicial em Ouro (Modelo Dimensional)
# MAGIC
# MAGIC #### Principais Passos:
# MAGIC 1. Execute uma **initial load** de `DimCustomer` (todos os clientes como *current*).  
# MAGIC 2. Crie entradas de data em `DimDate` de `refined_orders`. (Esta pode ser uma tabela pr√©-carregada para datas di√°rias por v√°rios anos)  
# MAGIC 3. Preencha `FactOrders`, vinculando cada ordem √†s keys de dimens√£o corretas.

# COMMAND ----------

# MAGIC %sql
# MAGIC -- Alterne para o esquema dourado usando o comando USE SCHEMA SQL
# MAGIC USE SCHEMA IDENTIFIER(:gold_schema);

# COMMAND ----------

# MAGIC %md
# MAGIC ### 3.1 Carga inicial do DimCustomer (SCD Tipo 2)
# MAGIC - Marque cada linha com `start_date = CURRENT_DATE()`, `end_date = NULL`, e `is_current = TRUE`.

# COMMAND ----------

# DBTITLE 1,INSERT INTO DimCustomer de silver.refined_customer
# MAGIC %sql
# MAGIC -- Inserir dados na tabela de dimens√µes DimCustomer
# MAGIC INSERT INTO DimCustomer
# MAGIC (
# MAGIC   customer_id,    -- Identificador exclusivo para o cliente
# MAGIC   name,           -- Nome do cliente
# MAGIC   address,        -- Endere√ßo do cliente
# MAGIC   nation_key,     -- Key que representa a na√ß√£o do cliente
# MAGIC   phone,          -- N√∫mero de telefone do cliente
# MAGIC   acct_bal,       -- Saldo da conta do cliente
# MAGIC   market_segment, -- Segmento de mercado do cliente
# MAGIC   comment,        -- Coment√°rios adicionais sobre o cliente
# MAGIC   start_date,     -- Data de in√≠cio do registro
# MAGIC   end_date,       -- Data de t√©rmino do registro (NULL para registros atuais)
# MAGIC   is_current      -- Sinalizador indicando se o registro √© atual
# MAGIC )
# MAGIC SELECT
# MAGIC   customer_id,    -- Selecione customer_id na tabela de origem
# MAGIC   name,           -- Selecione o nome na tabela de origem
# MAGIC   address,        -- Selecione o endere√ßo na tabela de origem
# MAGIC   nation_key,     -- Selecione nation_key na tabela de origem
# MAGIC   phone,          -- Selecione o telefone na tabela de origem
# MAGIC   acct_bal,       -- Selecione acct_bal na tabela de origem
# MAGIC   market_segment, -- Selecione market_segment na tabela de origem
# MAGIC   `comment`, -- Selecionar coment√°rio da tabela de origem
# MAGIC   CURRENT_DATE(), -- Definir start_date para a data atual
# MAGIC   NULL,           -- Defina end_date como NULL para registros atuais
# MAGIC   TRUE            -- Defina is_current como TRUE para registros atuais
# MAGIC FROM IDENTIFIER(:silver_schema || '.' || 'refined_customer')   -- Tabela de origem na esquema prata

# COMMAND ----------

# MAGIC %md
# MAGIC ### 3.2 DimDate
# MAGIC - Coletar valores exclusivos `order_date` de `refined_orders`.  
# MAGIC - Use fun√ß√µes embutidas para dividi-las em `day, month, year`.

# COMMAND ----------

# DBTITLE 1,INSERT INTO DimDate FROM silver.refined_orders
# MAGIC %sql
# MAGIC -- Inserir datas distintas na tabela de dimens√£o DimDate
# MAGIC INSERT INTO DimDate
# MAGIC (
# MAGIC   full_date,  -- Valor de data completa
# MAGIC   day,        -- Parte do dia da data
# MAGIC   month,      -- Parte do m√™s da data
# MAGIC   year        -- Parte do ano da data
# MAGIC )
# MAGIC SELECT DISTINCT
# MAGIC   order_date,          -- Valor de data completo de refined_orders
# MAGIC   DAY(order_date),     -- Parte do dia extra√≠da da data
# MAGIC   MONTH(order_date),   -- Parte do m√™s extra√≠da da data
# MAGIC   YEAR(order_date)     -- Parte do ano extra√≠da da data
# MAGIC FROM IDENTIFIER(:silver_schema || '.' || 'refined_orders')
# MAGIC WHERE order_date IS NOT NULL  -- Verifique se a data n√£o √© nula

# COMMAND ----------

# MAGIC %md
# MAGIC ### 3.3 FactOrders
# MAGIC - Vincular cada pedido a `DimCustomer` e `DimDate`.  
# MAGIC - Fazemos join em `(customer_id = dc.customer_id AND is_current = TRUE)` para SCD Tipo 2, garantindo que correspondemos apenas a um registro de dimens√£o ativa.

# COMMAND ----------

# DBTITLE 1,INSERT INTO FactOrders FROM silver.refined_orders JOIN DimCustomer JOIN DimDate
# MAGIC %sql
# MAGIC -- Inserir dados na tabela FactOrders
# MAGIC INSERT INTO FactOrders
# MAGIC (
# MAGIC   order_id,          -- Identificador exclusivo para o pedido
# MAGIC   dim_customer_key,  -- Foreign key referenciando a dimens√£o do cliente
# MAGIC   dim_date_key,      -- Foreign key fazendo refer√™ncia √† dimens√£o de data
# MAGIC   total_price,       -- Pre√ßo total do pedido
# MAGIC   order_status,      -- Estado do pedido
# MAGIC   order_priority,    -- Prioridade do pedido
# MAGIC   clerk,             -- Escritur√°rio que cuida do pedido
# MAGIC   ship_priority,     -- Prioridade de envio do pedido
# MAGIC   comment            -- Coment√°rios adicionais sobre o pedido
# MAGIC )
# MAGIC SELECT
# MAGIC   ro.order_id,       -- Selecione order_id de refined_orders
# MAGIC   dc.dim_customer_key, -- Selecione dim_customer_key de DimCustomer
# MAGIC   dd.dim_date_key,   -- Selecione dim_date_key de DimDate
# MAGIC   ro.total_price,    -- Selecione total_price de refined_orders
# MAGIC   ro.order_status,   -- Selecione order_status de refined_orders
# MAGIC   ro.order_priority, -- Selecione order_priority de refined_orders
# MAGIC   ro.clerk,          -- Selecione o funcion√°rio de refined_orders
# MAGIC   ro.ship_priority,  -- Selecione ship_priority de refined_orders
# MAGIC   ro.comment         -- Selecione o coment√°rio de refined_orders
# MAGIC FROM IDENTIFIER(:silver_schema || '.' || 'refined_orders') ro
# MAGIC JOIN DimCustomer dc
# MAGIC   ON ro.customer_id = dc.customer_id
# MAGIC   AND dc.is_current = TRUE -- Realize um join em customer_id e certifique-se de que o registro do cliente esteja atual.
# MAGIC JOIN DimDate dd
# MAGIC   ON ro.order_date = dd.full_date -- Realize um join em order_date e full_date.

# COMMAND ----------

# MAGIC %md
# MAGIC #### Valida√ß√£o
# MAGIC Verifique as contagens de registros em cada tabela **gold**:

# COMMAND ----------

# MAGIC %sql
# MAGIC -- Exibir a contagem de registros para a tabela DimCustomer
# MAGIC SELECT 'DimCustomer' AS table_name, COUNT(*) AS record_count FROM DimCustomer

# COMMAND ----------

# MAGIC %sql
# MAGIC -- Exibir a contagem de registros para a tabela DimDate
# MAGIC SELECT 'DimDate' AS table_name, COUNT(*) AS record_count FROM DimDate

# COMMAND ----------

# MAGIC %sql
# MAGIC -- Exibir a contagem de registros para a tabela FactOrders
# MAGIC SELECT 'FactOrders' AS table_name, COUNT(*) AS record_count FROM FactOrders

# COMMAND ----------

# MAGIC %md
# MAGIC ---

# COMMAND ----------

# MAGIC %md
# MAGIC ## Parte 4: Atualiza√ß√µes incrementais (SCD Tipo 2 MERGE)
# MAGIC
# MAGIC Na vida real, voc√™ detectaria mudan√ßas em `refined_customer` ao longo do tempo (por exemplo, um endere√ßo alterado ou um novo cliente). Quando voc√™ v√™ uma diferen√ßa:
# MAGIC 1. **Close** o registro antigo em DimCustomer ('end_date = <current date>`, `is_current = FALSE').  
# MAGIC 2. **Insert** um novo registro (com os atributos atualizados, 'start_date = <current date>`, `end_date = NULL`, `is_current = TRUE').  
# MAGIC
# MAGIC Abaixo est√° uma √∫nica instru√ß√£o MERGE que pode atualizar o registro antigo e inserir a nova vers√£o em uma √∫nica passagem.

# COMMAND ----------

# MAGIC %md
# MAGIC ### 4.1 Exemplo: Criar altera√ß√µes incrementais fict√≠cias
# MAGIC
# MAGIC Isso simula:  
# MAGIC - Um cliente *existente* (ID=101) alterando seu endere√ßo.  
# MAGIC - Um cliente *novinho em folha* (ID=99999).

# COMMAND ----------

# DBTITLE 1,CREATE OR REPLACE TEMP VIEW incremental_customer_updates
# MAGIC %sql
# MAGIC
# MAGIC CREATE OR REPLACE TEMP VIEW incremental_customer_updates AS
# MAGIC -- Cliente existente com informa√ß√µes atualizadas
# MAGIC SELECT 101    AS customer_id,
# MAGIC        'CHANGED Name'   AS name,
# MAGIC        'Updated Address 500' AS address,
# MAGIC        77     AS nation_key,
# MAGIC        '555-NEW-8888'   AS phone,
# MAGIC        CAST(999.99 AS DECIMAL(12,2)) AS acct_bal,
# MAGIC        'NEW_SEGMENT'    AS market_segment,
# MAGIC        'Existing row changed' AS comment
# MAGIC
# MAGIC UNION ALL
# MAGIC
# MAGIC -- Novo cliente com informa√ß√µes iniciais
# MAGIC SELECT 99999,
# MAGIC        'Completely New',
# MAGIC        '123 New Street',
# MAGIC        99,
# MAGIC        '999-999-1234',
# MAGIC        CAST(500.00 AS DECIMAL(12,2)),
# MAGIC        'MARKET_NEW',
# MAGIC        'Newly added customer';

# COMMAND ----------

# MAGIC %sql
# MAGIC -- Exibir o conte√∫do da exibi√ß√£o tempor√°ria para verificar os dados
# MAGIC SELECT * FROM incremental_customer_updates

# COMMAND ----------

# MAGIC %md
# MAGIC ### 4.2 MERGE √∫nico para SCD Tipo 2
# MAGIC 1. Produzimos duas linhas para *qualquer cliente alterado*: um rotulado `"OLD"` para fechar o registro atual e outro rotulado `"NEW"` para inserir uma vers√£o atualizada.  
# MAGIC 2. Para um cliente verdadeiramente novo, produzimos apenas uma linha `"NEW"`.

# COMMAND ----------

# DBTITLE 1,spark.sql(merge_sql)
# MAGIC %sql
# MAGIC WITH staged_changes AS (
# MAGIC   -- Linha "OLD": Usado para localizar e atualizar o registro de dimens√£o ativa existente
# MAGIC   SELECT
# MAGIC     i.customer_id,
# MAGIC     i.name,
# MAGIC     i.address,
# MAGIC     i.nation_key,
# MAGIC     i.phone,
# MAGIC     i.acct_bal,
# MAGIC     i.market_segment,
# MAGIC     i.comment,
# MAGIC     'OLD' AS row_type
# MAGIC   FROM incremental_customer_updates i
# MAGIC
# MAGIC   UNION ALL
# MAGIC
# MAGIC   -- Linha "NEW": Usado para inserir um registro de dimens√£o totalmente novo
# MAGIC   SELECT
# MAGIC     i.customer_id,
# MAGIC     i.name,
# MAGIC     i.address,
# MAGIC     i.nation_key,
# MAGIC     i.phone,
# MAGIC     i.acct_bal,
# MAGIC     i.market_segment,
# MAGIC     i.comment,
# MAGIC     'NEW' AS row_type
# MAGIC   FROM incremental_customer_updates i
# MAGIC )
# MAGIC
# MAGIC -- Executar a opera√ß√£o de mesclagem na tabela DimCustomer
# MAGIC MERGE INTO DimCustomer t
# MAGIC USING staged_changes s
# MAGIC   ON t.customer_id = s.customer_id
# MAGIC      AND t.is_current = TRUE
# MAGIC      AND s.row_type = 'OLD'
# MAGIC
# MAGIC -- Quando uma correspond√™ncia for encontrada, atualize o registro existente para fech√°-lo
# MAGIC WHEN MATCHED THEN
# MAGIC   UPDATE SET
# MAGIC     t.is_current = FALSE,
# MAGIC     t.end_date   = CURRENT_DATE()
# MAGIC
# MAGIC -- Quando nenhuma correspond√™ncia for encontrada, insira o novo registro como a vers√£o atual
# MAGIC WHEN NOT MATCHED THEN
# MAGIC   INSERT (
# MAGIC     customer_id,
# MAGIC     name,
# MAGIC     address,
# MAGIC     nation_key,
# MAGIC     phone,
# MAGIC     acct_bal,
# MAGIC     market_segment,
# MAGIC     comment,
# MAGIC     start_date,
# MAGIC     end_date,
# MAGIC     is_current
# MAGIC   )
# MAGIC   VALUES (
# MAGIC     s.customer_id,
# MAGIC     s.name,
# MAGIC     s.address,
# MAGIC     s.nation_key,
# MAGIC     s.phone,
# MAGIC     s.acct_bal,
# MAGIC     s.market_segment,
# MAGIC     s.comment,
# MAGIC     CURRENT_DATE(),
# MAGIC     NULL,
# MAGIC     TRUE
# MAGIC   );

# COMMAND ----------

# MAGIC %md
# MAGIC #### Explica√ß√£o:
# MAGIC - Se for encontrada uma linha correspondente ao registro `"OLD"` (o que significa que o cliente est√° ativo no `DimCustomer` neste momento), n√≥s **atualizaremos** esse registro para fech√°-lo (`is_current=FALSE` e `end_date=TODAY`).  
# MAGIC - Cada linha `"NEW"` n√£o corresponde, por isso aciona o caminho "INSERT". Inserimos uma nova linha com `is_current=TRUE`, uma nova `start_date` e sem `end_date`.

# COMMAND ----------

# MAGIC %md
# MAGIC ### 4.3 Validar as linhas atualizadas

# COMMAND ----------

# DBTITLE 1,SELECT FROM DimCustomer
# MAGIC %sql
# MAGIC -- Query para exibir detalhes de um cliente existente com o customer_id 101
# MAGIC SELECT 
# MAGIC   dim_customer_key,  -- Key exclusiva para o cliente na tabela de dimens√µes
# MAGIC   customer_id,       -- ID do cliente
# MAGIC   name,              -- Nome do cliente
# MAGIC   address,           -- Endere√ßo do cliente
# MAGIC   is_current,        -- Sinalizador indicando se o registro √© atual
# MAGIC   start_date,        -- Data de in√≠cio do registro
# MAGIC   end_date           -- Data de t√©rmino do registro
# MAGIC FROM 
# MAGIC   DimCustomer        -- Tabela de dimens√µes contendo dados do cliente
# MAGIC WHERE 
# MAGIC   customer_id = 101  -- Condi√ß√£o do filtro para selecionar o cliente com ID 101
# MAGIC ORDER BY 
# MAGIC   dim_customer_key   -- Ordene os resultados pela key exclusiva do cliente

# COMMAND ----------

# MAGIC %sql
# MAGIC -- Query para exibir detalhes de um novo cliente com o customer_id 99999
# MAGIC SELECT 
# MAGIC   dim_customer_key,  -- Key exclusiva para o cliente na tabela de dimens√µes
# MAGIC   customer_id,       -- ID do cliente
# MAGIC   name,              -- Nome do cliente
# MAGIC   address,           -- Endere√ßo do cliente
# MAGIC   is_current,        -- Sinalizador indicando se o registro √© atual
# MAGIC   start_date,        -- Data de in√≠cio do registro
# MAGIC   end_date           -- Data de t√©rmino do registro
# MAGIC FROM 
# MAGIC   DimCustomer        -- Tabela de dimens√µes contendo dados do cliente
# MAGIC WHERE 
# MAGIC   customer_id = 99999 -- Condi√ß√£o do filtro para selecionar o cliente com ID 99999
# MAGIC ORDER BY 
# MAGIC   dim_customer_key   -- Ordene os resultados pela key exclusiva do cliente

# COMMAND ----------

# MAGIC %md
# MAGIC Voc√™ deve ver que a vers√£o antiga do `customer_id = 101` agora tem `is_current=FALSE`, e uma nova vers√£o foi inserida. Um novo `customer_id=99999` tem apenas um registro (`is_current=TRUE`).

# COMMAND ----------

# MAGIC %md
# MAGIC ---

# COMMAND ----------

# MAGIC %md
# MAGIC ## Parte 5: Queries de exemplo na Star Schema
# MAGIC
# MAGIC Agora que temos `FactOrders` vinculando-se a `DimCustomer` e `DimDate`, vamos executar algumas verifica√ß√µes para ver como podemos analisar os dados.

# COMMAND ----------

# MAGIC %md
# MAGIC ### 5.1 Contagens de linhas

# COMMAND ----------

# DBTITLE 1,display(DimCustomer), display(DimState), display(FactOrders)
# MAGIC %sql
# MAGIC -- Exibe a contagem de registros na tabela DimCustomer com o nome da tabela
# MAGIC SELECT 'DimCustomer' AS table_name, COUNT(*) AS record_count FROM DimCustomer

# COMMAND ----------

# MAGIC %sql
# MAGIC -- Exibe a contagem de registros na tabela DimDate com o nome da tabela
# MAGIC SELECT 'DimDate' AS table_name, COUNT(*) AS record_count FROM DimDate

# COMMAND ----------

# MAGIC %sql
# MAGIC -- Exibe a contagem de registros na tabela FactOrders com o nome da tabela
# MAGIC SELECT 'FactOrders' AS table_name, COUNT(*) AS record_count FROM FactOrders

# COMMAND ----------

# MAGIC %md
# MAGIC ### 5.2 Exemplo de query: Principais Segmentos de Mercado

# COMMAND ----------

# DBTITLE 1,SELECT FROM FactOrders JOIN DimCustomer
# MAGIC %sql
# MAGIC -- Exibe o valor total gasto pelos clientes em cada segmento de mercado, limitado aos 10 principais segmentos
# MAGIC SELECT 
# MAGIC   dc.market_segment,                -- Selecione o segmento de mercado na tabela de dimens√£o DimCustomer
# MAGIC   SUM(f.total_price) AS total_spent -- Calcule o valor total gasto somando o total_price da tabela de fatos FactOrders
# MAGIC FROM 
# MAGIC   FactOrders f                      -- Tabela de fatos contendo dados do pedido
# MAGIC JOIN 
# MAGIC   DimCustomer dc                    -- Tabela de dimens√µes contendo dados do cliente
# MAGIC   ON f.dim_customer_key = dc.dim_customer_key -- Condi√ß√£o de join na key do cliente
# MAGIC GROUP BY 
# MAGIC   dc.market_segment                 -- Agrupar os resultados por segmento de mercado
# MAGIC ORDER BY 
# MAGIC   total_spent DESC                  -- Ordene os resultados pelo valor total gasto em ordem decrescente
# MAGIC LIMIT 10                            -- Limitar os resultados aos 10 principais segmentos de mercado

# COMMAND ----------

# MAGIC %md
# MAGIC ### 5.3 Exemplo de query: Contagens de pedidos por ano

# COMMAND ----------

# DBTITLE 1,SELECT FROM FactOrders JOIN DimDate
# MAGIC %sql
# MAGIC -- Conte o n√∫mero de pedidos para cada ano unindo a tabela FactOrders com a tabela DimDate
# MAGIC SELECT 
# MAGIC   dd.year,            -- Selecione o ano na tabela de dimens√£o DimDate
# MAGIC   COUNT(*) AS orders_count -- Conte o n√∫mero de pedidos para cada ano
# MAGIC FROM 
# MAGIC   FactOrders f        -- Tabela de fatos contendo dados do pedido
# MAGIC JOIN 
# MAGIC   DimDate dd          -- Tabela de dimens√£o contendo dados de data
# MAGIC   ON f.dim_date_key = dd.dim_date_key -- Condi√ß√£o de joion na key de data
# MAGIC GROUP BY 
# MAGIC   dd.year             -- Agrupar os resultados por ano
# MAGIC ORDER BY 
# MAGIC   dd.year             -- Ordenar os resultados por ano

# COMMAND ----------

# MAGIC %md
# MAGIC ---

# COMMAND ----------

# MAGIC %md
# MAGIC ## Parte 6: Resumo & Pr√≥ximas etapas
# MAGIC
# MAGIC 1. **Estruturas de tabela definidas**:  
# MAGIC    - Tabelas **Silver** (refinadas/integra√ß√£o) (`refined_customer`, `refined_orders`).  
# MAGIC    - Tabelas **Gold** de dimens√£o/fato (`DimCustomer`, `DimDate`, `FactOrders`).  
# MAGIC    - Usado `GENERATED ALWAYS AS IDENTITY` para keys substitutas.  
# MAGIC    - Gerenciei SCD Tipo 2 no `DimCustomer` usando `start_date`, `end_date` e `is_current`.  
# MAGIC
# MAGIC 2. **Dados iniciais carregados**:  
# MAGIC    - Movido de `bronze` TPC-H para **silver**.  
# MAGIC    - Tabelas de dimens√µes e fatos **gold** preenchidas.  
# MAGIC
# MAGIC 3. **Atualiza√ß√µes incrementais**:  
# MAGIC    - Demonstrou um √∫nico MERGE para SCD Tipo 2.  
# MAGIC    - Fechei registros de dimens√µes antigas e inseri novos simultaneamente.  
# MAGIC
# MAGIC 4. **Valida√ß√£o**:  
# MAGIC    - Mostrou contagens de linhas, queries para confirmar a funcionalidade do star schema.  
# MAGIC
# MAGIC **Para onde ir a seguir**:  
# MAGIC - Incorporar verifica√ß√µes automatizadas de altera√ß√µes `refined_customer` para manter `DimCustomer` sincronizado ao longo do tempo.  
# MAGIC - Estenda a l√≥gica do Tipo 2 para outras dimens√µes, como atributos baseados em pe√ßa, fornecedor ou data.  
# MAGIC - Crie tabelas de fatos adicionais (por exemplo, FactLineItems) para aumentar seu star schema.  
# MAGIC - Explore queries avan√ßadas de BI ou an√°lise em seu star schema, aproveitando ao m√°ximo as otimiza√ß√µes de desempenho do Databricks.

# COMMAND ----------

# MAGIC %md
# MAGIC #### Voc√™ concluiu:
# MAGIC 1. Construindo e estruturando suas tabelas **silver**.  
# MAGIC 2. Projetando uma star schema **gold** com uma dimens√£o Tipo 2.  
# MAGIC 3. Carregando suas tabelas de dimens√µes e fatos com atualiza√ß√µes de dados **initial** e **incremental**.  
# MAGIC 4. Executando queries para validar e explorar a star schema.

# COMMAND ----------

# MAGIC %md
# MAGIC ## Limpeza
# MAGIC
# MAGIC Antes de prosseguir, execute o bloco SQL na c√©lula abaixo para limpar seu trabalho.

# COMMAND ----------

# DBTITLE 1,DROP tabelas de prata e ouro
# MAGIC %sql
# MAGIC -- Drop tabelas Pratas
# MAGIC DROP TABLE IF EXISTS silver.refined_customer;
# MAGIC DROP TABLE IF EXISTS silver.refined_orders;
# MAGIC
# MAGIC -- Drop tabelas Ouros
# MAGIC DROP TABLE IF EXISTS gold.DimCustomer;
# MAGIC DROP TABLE IF EXISTS gold.DimDate;
# MAGIC DROP TABLE IF EXISTS gold.FactOrders;

# COMMAND ----------

# MAGIC %md
# MAGIC Remova todos os widgets criados durante a demonstra√ß√£o para limpar o ambiente do notebook.

# COMMAND ----------

dbutils.widgets.removeAll()

# COMMAND ----------

# MAGIC %md
# MAGIC ## Conclus√£o
# MAGIC Nesta demonstra√ß√£o, implementamos com sucesso um design de star schema para um data warehouse usando o Databricks. Aplicamos a metodologia SCD Tipo 2 para gerenciar dados hist√≥ricos em tabelas de dimens√µes, garantindo a consist√™ncia e a rastreabilidade dos dados. Por meio da transforma√ß√£o de dados passo a passo e do desenvolvimento de pipeline de ETL, ganhamos experi√™ncia pr√°tica na cria√ß√£o e gerenciamento de modelos de dados para an√°lise. Ao final desta demonstra√ß√£o, voc√™ ter√° desenvolvido profici√™ncia na cria√ß√£o de pipelines de ETL escalon√°veis e eficientes, na manuten√ß√£o da linhagem de dados e na aplica√ß√£o de conceitos de modelagem dimensional a datasets do mundo real.

# COMMAND ----------

# MAGIC %md
# MAGIC
# MAGIC &copy; 2025 Databricks, Inc. All rights reserved. Apache, Apache Spark, Spark, the Spark Logo, Apache Iceberg, Iceberg, and the Apache Iceberg logo are trademarks of the <a href="https://www.apache.org/">Apache Software Foundation</a>.<br/>
# MAGIC <br/><a href="https://databricks.com/privacy-policy">Privacy Policy</a> | 
# MAGIC <a href="https://databricks.com/terms-of-use">Terms of Use</a> | 
# MAGIC <a href="https://help.databricks.com/">Support</a>
